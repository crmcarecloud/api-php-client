<?php
/**
 * SimpleReward
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * Discover the essentials of the CareCloud platform API, from authentication methods to available resources. Explore the REST API, which allows you to seamlessly connect the CareCloud platform with other systems.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.55
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * SimpleReward Class Doc Comment
 *
 * @category Class
 * @description Simple Reward structure.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SimpleReward implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SimpleReward';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'reward_id' => 'string',
        'code' => 'string',
        'names' => '\CrmCareCloud\Webservice\RestApi\Client\Model\TextTranslation[]',
        'notes' => '\CrmCareCloud\Webservice\RestApi\Client\Model\TextTranslation[]',
        'subtitles' => '\CrmCareCloud\Webservice\RestApi\Client\Model\TextTranslation[]',
        'points_cost' => 'float',
        'valid_date_from' => 'string',
        'valid_date_to' => 'string',
        'reward_type_id' => 'string',
        'reward_type_value' => 'float',
        'maximum_discount_value' => 'float',
        'minimum_purchase_value' => 'float',
        'stores' => '\CrmCareCloud\Webservice\RestApi\Client\Model\StoreID[]',
        'segments' => '\CrmCareCloud\Webservice\RestApi\Client\Model\SegmentID[]',
        'priority' => 'int',
        'image_urls' => '\CrmCareCloud\Webservice\RestApi\Client\Model\UrlLanguageVariant[]',
        'reward_external_urls' => '\CrmCareCloud\Webservice\RestApi\Client\Model\UrlLanguageVariant[]',
        'tags' => '\CrmCareCloud\Webservice\RestApi\Client\Model\Tag[]',
        'global_reward' => 'bool',
        'partner_id' => 'string',
        'voucher_validity' => 'string',
        'voucher_validity_value' => 'string',
        'voucher_code_generation_preference' => 'string',
        'is_portable' => 'bool',
        'state' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'reward_id' => null,
        'code' => null,
        'names' => null,
        'notes' => null,
        'subtitles' => null,
        'points_cost' => 'float',
        'valid_date_from' => null,
        'valid_date_to' => null,
        'reward_type_id' => null,
        'reward_type_value' => 'float',
        'maximum_discount_value' => 'float',
        'minimum_purchase_value' => 'float',
        'stores' => null,
        'segments' => null,
        'priority' => null,
        'image_urls' => null,
        'reward_external_urls' => null,
        'tags' => null,
        'global_reward' => null,
        'partner_id' => null,
        'voucher_validity' => null,
        'voucher_validity_value' => null,
        'voucher_code_generation_preference' => null,
        'is_portable' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reward_id' => 'reward_id',
        'code' => 'code',
        'names' => 'names',
        'notes' => 'notes',
        'subtitles' => 'subtitles',
        'points_cost' => 'points_cost',
        'valid_date_from' => 'valid_date_from',
        'valid_date_to' => 'valid_date_to',
        'reward_type_id' => 'reward_type_id',
        'reward_type_value' => 'reward_type_value',
        'maximum_discount_value' => 'maximum_discount_value',
        'minimum_purchase_value' => 'minimum_purchase_value',
        'stores' => 'stores',
        'segments' => 'segments',
        'priority' => 'priority',
        'image_urls' => 'image_urls',
        'reward_external_urls' => 'reward_external_urls',
        'tags' => 'tags',
        'global_reward' => 'global_reward',
        'partner_id' => 'partner_id',
        'voucher_validity' => 'voucher_validity',
        'voucher_validity_value' => 'voucher_validity_value',
        'voucher_code_generation_preference' => 'voucher_code_generation_preference',
        'is_portable' => 'is_portable',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reward_id' => 'setRewardId',
        'code' => 'setCode',
        'names' => 'setNames',
        'notes' => 'setNotes',
        'subtitles' => 'setSubtitles',
        'points_cost' => 'setPointsCost',
        'valid_date_from' => 'setValidDateFrom',
        'valid_date_to' => 'setValidDateTo',
        'reward_type_id' => 'setRewardTypeId',
        'reward_type_value' => 'setRewardTypeValue',
        'maximum_discount_value' => 'setMaximumDiscountValue',
        'minimum_purchase_value' => 'setMinimumPurchaseValue',
        'stores' => 'setStores',
        'segments' => 'setSegments',
        'priority' => 'setPriority',
        'image_urls' => 'setImageUrls',
        'reward_external_urls' => 'setRewardExternalUrls',
        'tags' => 'setTags',
        'global_reward' => 'setGlobalReward',
        'partner_id' => 'setPartnerId',
        'voucher_validity' => 'setVoucherValidity',
        'voucher_validity_value' => 'setVoucherValidityValue',
        'voucher_code_generation_preference' => 'setVoucherCodeGenerationPreference',
        'is_portable' => 'setIsPortable',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reward_id' => 'getRewardId',
        'code' => 'getCode',
        'names' => 'getNames',
        'notes' => 'getNotes',
        'subtitles' => 'getSubtitles',
        'points_cost' => 'getPointsCost',
        'valid_date_from' => 'getValidDateFrom',
        'valid_date_to' => 'getValidDateTo',
        'reward_type_id' => 'getRewardTypeId',
        'reward_type_value' => 'getRewardTypeValue',
        'maximum_discount_value' => 'getMaximumDiscountValue',
        'minimum_purchase_value' => 'getMinimumPurchaseValue',
        'stores' => 'getStores',
        'segments' => 'getSegments',
        'priority' => 'getPriority',
        'image_urls' => 'getImageUrls',
        'reward_external_urls' => 'getRewardExternalUrls',
        'tags' => 'getTags',
        'global_reward' => 'getGlobalReward',
        'partner_id' => 'getPartnerId',
        'voucher_validity' => 'getVoucherValidity',
        'voucher_validity_value' => 'getVoucherValidityValue',
        'voucher_code_generation_preference' => 'getVoucherCodeGenerationPreference',
        'is_portable' => 'getIsPortable',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRIORITY_1 = 1;
const PRIORITY_2 = 2;
const PRIORITY_3 = 3;
const PRIORITY_4 = 4;
const PRIORITY_5 = 5;
const PRIORITY_6 = 6;
const PRIORITY_7 = 7;
const PRIORITY_8 = 8;
const PRIORITY_9 = 9;
const VOUCHER_VALIDITY_INTERVAL = 'interval';
const VOUCHER_VALIDITY_END_OF_TIME_UNIT = 'end_of_time_unit';
const VOUCHER_VALIDITY_REWARD_VALIDITY = 'reward_validity';
const STATE_1 = 1;
const STATE_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getPriorityAllowableValues()
    {
        return [
            self::PRIORITY_1,
self::PRIORITY_2,
self::PRIORITY_3,
self::PRIORITY_4,
self::PRIORITY_5,
self::PRIORITY_6,
self::PRIORITY_7,
self::PRIORITY_8,
self::PRIORITY_9,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getVoucherValidityAllowableValues()
    {
        return [
            self::VOUCHER_VALIDITY_INTERVAL,
self::VOUCHER_VALIDITY_END_OF_TIME_UNIT,
self::VOUCHER_VALIDITY_REWARD_VALIDITY,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_1,
self::STATE_2,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reward_id'] = isset($data['reward_id']) ? $data['reward_id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['names'] = isset($data['names']) ? $data['names'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['subtitles'] = isset($data['subtitles']) ? $data['subtitles'] : null;
        $this->container['points_cost'] = isset($data['points_cost']) ? $data['points_cost'] : null;
        $this->container['valid_date_from'] = isset($data['valid_date_from']) ? $data['valid_date_from'] : null;
        $this->container['valid_date_to'] = isset($data['valid_date_to']) ? $data['valid_date_to'] : null;
        $this->container['reward_type_id'] = isset($data['reward_type_id']) ? $data['reward_type_id'] : null;
        $this->container['reward_type_value'] = isset($data['reward_type_value']) ? $data['reward_type_value'] : null;
        $this->container['maximum_discount_value'] = isset($data['maximum_discount_value']) ? $data['maximum_discount_value'] : null;
        $this->container['minimum_purchase_value'] = isset($data['minimum_purchase_value']) ? $data['minimum_purchase_value'] : null;
        $this->container['stores'] = isset($data['stores']) ? $data['stores'] : null;
        $this->container['segments'] = isset($data['segments']) ? $data['segments'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['image_urls'] = isset($data['image_urls']) ? $data['image_urls'] : null;
        $this->container['reward_external_urls'] = isset($data['reward_external_urls']) ? $data['reward_external_urls'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['global_reward'] = isset($data['global_reward']) ? $data['global_reward'] : null;
        $this->container['partner_id'] = isset($data['partner_id']) ? $data['partner_id'] : null;
        $this->container['voucher_validity'] = isset($data['voucher_validity']) ? $data['voucher_validity'] : null;
        $this->container['voucher_validity_value'] = isset($data['voucher_validity_value']) ? $data['voucher_validity_value'] : null;
        $this->container['voucher_code_generation_preference'] = isset($data['voucher_code_generation_preference']) ? $data['voucher_code_generation_preference'] : null;
        $this->container['is_portable'] = isset($data['is_portable']) ? $data['is_portable'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if ($this->container['names'] === null) {
            $invalidProperties[] = "'names' can't be null";
        }
        if ($this->container['reward_type_id'] === null) {
            $invalidProperties[] = "'reward_type_id' can't be null";
        }
        if ($this->container['reward_type_value'] === null) {
            $invalidProperties[] = "'reward_type_value' can't be null";
        }
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($this->container['priority']) && !in_array($this->container['priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['global_reward'] === null) {
            $invalidProperties[] = "'global_reward' can't be null";
        }
        if ($this->container['voucher_validity'] === null) {
            $invalidProperties[] = "'voucher_validity' can't be null";
        }
        $allowedValues = $this->getVoucherValidityAllowableValues();
        if (!is_null($this->container['voucher_validity']) && !in_array($this->container['voucher_validity'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'voucher_validity', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['voucher_code_generation_preference'] === null) {
            $invalidProperties[] = "'voucher_code_generation_preference' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reward_id
     *
     * @return string
     */
    public function getRewardId()
    {
        return $this->container['reward_id'];
    }

    /**
     * Sets reward_id
     *
     * @param string $reward_id The unique ID of the simple reward.
     *
     * @return $this
     */
    public function setRewardId($reward_id)
    {
        $this->container['reward_id'] = $reward_id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Unique code of the simple reward.<br/> <i>The unique code serves as an identifier for specific rewards, allowing for easy recognition and application during transactions. For instance, a customer might enter the code BIRTHDAY20 to receive a 20% discount in celebration of their birthday. This system simplifies the process of tracking and redeeming rewards, ensuring that customers can easily access their benefits while businesses can efficiently manage promotional offers.</i>
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets names
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\TextTranslation[]
     */
    public function getNames()
    {
        return $this->container['names'];
    }

    /**
     * Sets names
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\TextTranslation[] $names List of reward name translations.
     *
     * @return $this
     */
    public function setNames($names)
    {
        $this->container['names'] = $names;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\TextTranslation[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\TextTranslation[] $notes List of note translations.
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets subtitles
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\TextTranslation[]
     */
    public function getSubtitles()
    {
        return $this->container['subtitles'];
    }

    /**
     * Sets subtitles
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\TextTranslation[] $subtitles List of reward subtitle translations.
     *
     * @return $this
     */
    public function setSubtitles($subtitles)
    {
        $this->container['subtitles'] = $subtitles;

        return $this;
    }

    /**
     * Gets points_cost
     *
     * @return float
     */
    public function getPointsCost()
    {
        return $this->container['points_cost'];
    }

    /**
     * Sets points_cost
     *
     * @param float $points_cost Specifies the number of loyalty points required for voucher redemption.
     *
     * @return $this
     */
    public function setPointsCost($points_cost)
    {
        $this->container['points_cost'] = $points_cost;

        return $this;
    }

    /**
     * Gets valid_date_from
     *
     * @return string
     */
    public function getValidDateFrom()
    {
        return $this->container['valid_date_from'];
    }

    /**
     * Sets valid_date_from
     *
     * @param string $valid_date_from Indicates the date when the reward's validity period begins *(YYYY-MM-DD)*.
     *
     * @return $this
     */
    public function setValidDateFrom($valid_date_from)
    {
        $this->container['valid_date_from'] = $valid_date_from;

        return $this;
    }

    /**
     * Gets valid_date_to
     *
     * @return string
     */
    public function getValidDateTo()
    {
        return $this->container['valid_date_to'];
    }

    /**
     * Sets valid_date_to
     *
     * @param string $valid_date_to Indicates the date when the reward's validity period ends *(YYYY-MM-DD)*.
     *
     * @return $this
     */
    public function setValidDateTo($valid_date_to)
    {
        $this->container['valid_date_to'] = $valid_date_to;

        return $this;
    }

    /**
     * Gets reward_type_id
     *
     * @return string
     */
    public function getRewardTypeId()
    {
        return $this->container['reward_type_id'];
    }

    /**
     * Sets reward_type_id
     *
     * @param string $reward_type_id Indicates the unique ID for the reward type, defining its behavior. Current supported types: *Product with fixed discount / Product with a discount in percentages / Product for discounted price*. See the [GET/reward−types](https://carecloud.readme.io/reference/getrewardtypes) endpoint for additional information.
     *
     * @return $this
     */
    public function setRewardTypeId($reward_type_id)
    {
        $this->container['reward_type_id'] = $reward_type_id;

        return $this;
    }

    /**
     * Gets reward_type_value
     *
     * @return float
     */
    public function getRewardTypeValue()
    {
        return $this->container['reward_type_value'];
    }

    /**
     * Sets reward_type_value
     *
     * @param float $reward_type_value Represents the discount amount, which can be either a percentage, a fixed currency value, or the final price after applying the reward.
     *
     * @return $this
     */
    public function setRewardTypeValue($reward_type_value)
    {
        $this->container['reward_type_value'] = $reward_type_value;

        return $this;
    }

    /**
     * Gets maximum_discount_value
     *
     * @return float
     */
    public function getMaximumDiscountValue()
    {
        return $this->container['maximum_discount_value'];
    }

    /**
     * Sets maximum_discount_value
     *
     * @param float $maximum_discount_value Represents the maximum discount possible if `Product with a discount in percentages` reward type is selected. If not set, the maximum is not limited.
     *
     * @return $this
     */
    public function setMaximumDiscountValue($maximum_discount_value)
    {
        $this->container['maximum_discount_value'] = $maximum_discount_value;

        return $this;
    }

    /**
     * Gets minimum_purchase_value
     *
     * @return float
     */
    public function getMinimumPurchaseValue()
    {
        return $this->container['minimum_purchase_value'];
    }

    /**
     * Sets minimum_purchase_value
     *
     * @param float $minimum_purchase_value Specifies the minimum total purchase amount required to apply the reward's discount. If not set, the reward can be applied to any purchase regardless of the total price.
     *
     * @return $this
     */
    public function setMinimumPurchaseValue($minimum_purchase_value)
    {
        $this->container['minimum_purchase_value'] = $minimum_purchase_value;

        return $this;
    }

    /**
     * Gets stores
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\StoreID[]
     */
    public function getStores()
    {
        return $this->container['stores'];
    }

    /**
     * Sets stores
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\StoreID[] $stores List of the stores where the reward can be claimed.
     *
     * @return $this
     */
    public function setStores($stores)
    {
        $this->container['stores'] = $stores;

        return $this;
    }

    /**
     * Gets segments
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\SegmentID[]
     */
    public function getSegments()
    {
        return $this->container['segments'];
    }

    /**
     * Sets segments
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\SegmentID[] $segments List of the segments for witch the reward can be applied.
     *
     * @return $this
     */
    public function setSegments($segments)
    {
        $this->container['segments'] = $segments;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority Priority of the reward. *1 is the highest priority*
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $allowedValues = $this->getPriorityAllowableValues();
        if (!is_null($priority) && !in_array($priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets image_urls
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\UrlLanguageVariant[]
     */
    public function getImageUrls()
    {
        return $this->container['image_urls'];
    }

    /**
     * Sets image_urls
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\UrlLanguageVariant[] $image_urls List of URLs linking to reward images in the chosen language.
     *
     * @return $this
     */
    public function setImageUrls($image_urls)
    {
        $this->container['image_urls'] = $image_urls;

        return $this;
    }

    /**
     * Gets reward_external_urls
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\UrlLanguageVariant[]
     */
    public function getRewardExternalUrls()
    {
        return $this->container['reward_external_urls'];
    }

    /**
     * Sets reward_external_urls
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\UrlLanguageVariant[] $reward_external_urls A list of URLs and their corresponding language versions, linking to external resources and information about rewards.
     *
     * @return $this
     */
    public function setRewardExternalUrls($reward_external_urls)
    {
        $this->container['reward_external_urls'] = $reward_external_urls;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\Tag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\Tag[] $tags List of the tags assigned to the reward. Tags are used for easier identification of selected rewards. The list of tags for rewards is available at the endpoint [GET /rewards/tags](https://carecloud.readme.io/reference/getsubrewardtags).
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets global_reward
     *
     * @return bool
     */
    public function getGlobalReward()
    {
        return $this->container['global_reward'];
    }

    /**
     * Sets global_reward
     *
     * @param bool $global_reward The parameter describes if the reward is available for all CareCloud partners or only for selected one. If the reward is for selected partner only, the parameter partner_id is required in the request. Possible values: - `true` The reward is global and it is available for all partners in CareCloud. - `false` The reward is available only for the specified partner from the parameter partner_id.
     *
     * @return $this
     */
    public function setGlobalReward($global_reward)
    {
        $this->container['global_reward'] = $global_reward;

        return $this;
    }

    /**
     * Gets partner_id
     *
     * @return string
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id
     *
     * @param string $partner_id The unique ID of the partner. Partner represents business, company, or organization in the CareCloud domain. CareCloud allows single partner setup or multiple partner setup depending on the business setup.
     *
     * @return $this
     */
    public function setPartnerId($partner_id)
    {
        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets voucher_validity
     *
     * @return string
     */
    public function getVoucherValidity()
    {
        return $this->container['voucher_validity'];
    }

    /**
     * Sets voucher_validity
     *
     * @param string $voucher_validity This parameter determines the type of validity period applied to the voucher. It can be one of the following values:   - `interval`  The voucher is valid for a specific time interval after issuance. If you use this value, the parameter voucher_validity_value is mandatory and you need to add there an interval. For example *7 days, 1 year, 10 weeks, 30 minutes, etc*   - `end_of_time_unit`  The voucher is valid until the end of a specific time unit, such as the end of a day, week, or month. If you use this value, the parameter voucher_validity_value is mandatory and you need to add there an interval. Possible values: *end_of_the_day / end_of_week / end_of_month / end_of_year*   - `reward_validity`  The voucher's validity is linked to the validity period of the associated reward. In this case, there is no other value needs to be set and parameter `voucher_validity_value` is not mandatory and has no effect.
     *
     * @return $this
     */
    public function setVoucherValidity($voucher_validity)
    {
        $allowedValues = $this->getVoucherValidityAllowableValues();
        if (!in_array($voucher_validity, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'voucher_validity', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voucher_validity'] = $voucher_validity;

        return $this;
    }

    /**
     * Gets voucher_validity_value
     *
     * @return string
     */
    public function getVoucherValidityValue()
    {
        return $this->container['voucher_validity_value'];
    }

    /**
     * Sets voucher_validity_value
     *
     * @param string $voucher_validity_value This parameter determines the value of validity period applied to the voucher. Depending on the `voucher_validity` it can have multiple values. For a list of possible values, please read the description of `voucher_valdity` parameter.
     *
     * @return $this
     */
    public function setVoucherValidityValue($voucher_validity_value)
    {
        $this->container['voucher_validity_value'] = $voucher_validity_value;

        return $this;
    }

    /**
     * Gets voucher_code_generation_preference
     *
     * @return string
     */
    public function getVoucherCodeGenerationPreference()
    {
        return $this->container['voucher_code_generation_preference'];
    }

    /**
     * Sets voucher_code_generation_preference
     *
     * @param string $voucher_code_generation_preference This parameter controls the method of generating voucher codes within the system.  It can be set to one of two values: - `A` Automatically generate voucher codes. When 'A' is selected, the system will generate voucher codes automatically based on predefined rules and algorithms. - `M` Manually import voucher codes. When 'M' is chosen, voucher codes will need to be manually inputted into the system by an administrator or user.
     *
     * @return $this
     */
    public function setVoucherCodeGenerationPreference($voucher_code_generation_preference)
    {
        $this->container['voucher_code_generation_preference'] = $voucher_code_generation_preference;

        return $this;
    }

    /**
     * Gets is_portable
     *
     * @return bool
     */
    public function getIsPortable()
    {
        return $this->container['is_portable'];
    }

    /**
     * Sets is_portable
     *
     * @param bool $is_portable This parameter determines whether the voucher can be transferred to a customer other than the one it was originally assigned to.  The parameter can be set to:   - `true` The voucher is portable and can be transferred to a different customer. This allows for flexibility in reward management, such as gifting or transferring voucher between customers.    - `false` The voucher is not portable and remains exclusive to the initially assigned customer. This ensures that the voucher stays fixed and cannot be moved to another customer.
     *
     * @return $this
     */
    public function setIsPortable($is_portable)
    {
        $this->container['is_portable'] = $is_portable;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state State of the simple reward. *Possible values are: 1 - active / 2 - non active *
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
