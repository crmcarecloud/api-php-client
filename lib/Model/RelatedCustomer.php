<?php
/**
 * RelatedCustomer
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * RelatedCustomer Class Doc Comment
 *
 * @category Class
 * @description Basic information about a relation between customers.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RelatedCustomer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RelatedCustomer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'customer_relation_id' => 'string',
        'related_customer_id' => 'string',
        'short_name' => 'string',
        'customer_relation_type_id' => 'string',
        'is_leading' => 'bool',
        'valid_from' => 'string',
        'valid_to' => 'string',
        'last_change' => 'string',
        'state' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'customer_relation_id' => null,
        'related_customer_id' => null,
        'short_name' => null,
        'customer_relation_type_id' => null,
        'is_leading' => null,
        'valid_from' => null,
        'valid_to' => null,
        'last_change' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_relation_id' => 'customer_relation_id',
        'related_customer_id' => 'related_customer_id',
        'short_name' => 'short_name',
        'customer_relation_type_id' => 'customer_relation_type_id',
        'is_leading' => 'is_leading',
        'valid_from' => 'valid_from',
        'valid_to' => 'valid_to',
        'last_change' => 'last_change',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_relation_id' => 'setCustomerRelationId',
        'related_customer_id' => 'setRelatedCustomerId',
        'short_name' => 'setShortName',
        'customer_relation_type_id' => 'setCustomerRelationTypeId',
        'is_leading' => 'setIsLeading',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'last_change' => 'setLastChange',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_relation_id' => 'getCustomerRelationId',
        'related_customer_id' => 'getRelatedCustomerId',
        'short_name' => 'getShortName',
        'customer_relation_type_id' => 'getCustomerRelationTypeId',
        'is_leading' => 'getIsLeading',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'last_change' => 'getLastChange',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_0 = 0;
const STATE_1 = 1;
const STATE_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_0,
self::STATE_1,
self::STATE_2,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_relation_id'] = isset($data['customer_relation_id']) ? $data['customer_relation_id'] : null;
        $this->container['related_customer_id'] = isset($data['related_customer_id']) ? $data['related_customer_id'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['customer_relation_type_id'] = isset($data['customer_relation_type_id']) ? $data['customer_relation_type_id'] : null;
        $this->container['is_leading'] = isset($data['is_leading']) ? $data['is_leading'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
        $this->container['last_change'] = isset($data['last_change']) ? $data['last_change'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['related_customer_id'] === null) {
            $invalidProperties[] = "'related_customer_id' can't be null";
        }
        if ($this->container['customer_relation_type_id'] === null) {
            $invalidProperties[] = "'customer_relation_type_id' can't be null";
        }
        if ($this->container['is_leading'] === null) {
            $invalidProperties[] = "'is_leading' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_relation_id
     *
     * @return string
     */
    public function getCustomerRelationId()
    {
        return $this->container['customer_relation_id'];
    }

    /**
     * Sets customer_relation_id
     *
     * @param string $customer_relation_id The unique ID of the customer relation.
     *
     * @return $this
     */
    public function setCustomerRelationId($customer_relation_id)
    {
        $this->container['customer_relation_id'] = $customer_relation_id;

        return $this;
    }

    /**
     * Gets related_customer_id
     *
     * @return string
     */
    public function getRelatedCustomerId()
    {
        return $this->container['related_customer_id'];
    }

    /**
     * Sets related_customer_id
     *
     * @param string $related_customer_id The unique ID of the related customer.
     *
     * @return $this
     */
    public function setRelatedCustomerId($related_customer_id)
    {
        $this->container['related_customer_id'] = $related_customer_id;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name Short name of the customer.
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets customer_relation_type_id
     *
     * @return string
     */
    public function getCustomerRelationTypeId()
    {
        return $this->container['customer_relation_type_id'];
    }

    /**
     * Sets customer_relation_type_id
     *
     * @param string $customer_relation_type_id The unique ID of the customer relation type.
     *
     * @return $this
     */
    public function setCustomerRelationTypeId($customer_relation_type_id)
    {
        $this->container['customer_relation_type_id'] = $customer_relation_type_id;

        return $this;
    }

    /**
     * Gets is_leading
     *
     * @return bool
     */
    public function getIsLeading()
    {
        return $this->container['is_leading'];
    }

    /**
     * Sets is_leading
     *
     * @param bool $is_leading Parameter says, if related customer is a leader in their relationship. *Example: Parent is a leader, child is a follower*
     *
     * @return $this
     */
    public function setIsLeading($is_leading)
    {
        $this->container['is_leading'] = $is_leading;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return string
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param string $valid_from Date and time when customer relation starts. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return string
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param string $valid_to Date and time when customer relation ends. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return string
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param string $last_change Date and time of the last change. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state State of the related customer. *Possible values are: 0 - deleted / 1 - active / 2 - non active*
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
