<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description Order resource.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'order_id' => 'string',
'order_number' => 'string',
'customer_id' => 'string',
'currency_id' => 'string',
'total_price' => 'float',
'discount_codes' => 'string[]',
'order_items' => '\CrmCareCloud\Webservice\RestApi\Client\Model\OrderItem[]',
'invoicing_data' => '\CrmCareCloud\Webservice\RestApi\Client\Model\OrderInvoicing',
'shipping_data' => '\CrmCareCloud\Webservice\RestApi\Client\Model\OrderShipping',
'customer_note' => 'string',
'order_status' => 'string',
'shipping_date' => 'string',
'program_ranking' => 'int',
'payment_status' => 'string',
'invoice_document_url' => 'string',
'last_change' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'order_id' => null,
'order_number' => null,
'customer_id' => null,
'currency_id' => null,
'total_price' => 'float',
'discount_codes' => null,
'order_items' => null,
'invoicing_data' => null,
'shipping_data' => null,
'customer_note' => null,
'order_status' => null,
'shipping_date' => null,
'program_ranking' => null,
'payment_status' => null,
'invoice_document_url' => null,
'last_change' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'order_id',
'order_number' => 'order_number',
'customer_id' => 'customer_id',
'currency_id' => 'currency_id',
'total_price' => 'total_price',
'discount_codes' => 'discount_codes',
'order_items' => 'order_items',
'invoicing_data' => 'invoicing_data',
'shipping_data' => 'shipping_data',
'customer_note' => 'customer_note',
'order_status' => 'order_status',
'shipping_date' => 'shipping_date',
'program_ranking' => 'program_ranking',
'payment_status' => 'payment_status',
'invoice_document_url' => 'invoice_document_url',
'last_change' => 'last_change'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
'order_number' => 'setOrderNumber',
'customer_id' => 'setCustomerId',
'currency_id' => 'setCurrencyId',
'total_price' => 'setTotalPrice',
'discount_codes' => 'setDiscountCodes',
'order_items' => 'setOrderItems',
'invoicing_data' => 'setInvoicingData',
'shipping_data' => 'setShippingData',
'customer_note' => 'setCustomerNote',
'order_status' => 'setOrderStatus',
'shipping_date' => 'setShippingDate',
'program_ranking' => 'setProgramRanking',
'payment_status' => 'setPaymentStatus',
'invoice_document_url' => 'setInvoiceDocumentUrl',
'last_change' => 'setLastChange'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
'order_number' => 'getOrderNumber',
'customer_id' => 'getCustomerId',
'currency_id' => 'getCurrencyId',
'total_price' => 'getTotalPrice',
'discount_codes' => 'getDiscountCodes',
'order_items' => 'getOrderItems',
'invoicing_data' => 'getInvoicingData',
'shipping_data' => 'getShippingData',
'customer_note' => 'getCustomerNote',
'order_status' => 'getOrderStatus',
'shipping_date' => 'getShippingDate',
'program_ranking' => 'getProgramRanking',
'payment_status' => 'getPaymentStatus',
'invoice_document_url' => 'getInvoiceDocumentUrl',
'last_change' => 'getLastChange'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['discount_codes'] = isset($data['discount_codes']) ? $data['discount_codes'] : null;
        $this->container['order_items'] = isset($data['order_items']) ? $data['order_items'] : null;
        $this->container['invoicing_data'] = isset($data['invoicing_data']) ? $data['invoicing_data'] : null;
        $this->container['shipping_data'] = isset($data['shipping_data']) ? $data['shipping_data'] : null;
        $this->container['customer_note'] = isset($data['customer_note']) ? $data['customer_note'] : null;
        $this->container['order_status'] = isset($data['order_status']) ? $data['order_status'] : null;
        $this->container['shipping_date'] = isset($data['shipping_date']) ? $data['shipping_date'] : null;
        $this->container['program_ranking'] = isset($data['program_ranking']) ? $data['program_ranking'] : null;
        $this->container['payment_status'] = isset($data['payment_status']) ? $data['payment_status'] : null;
        $this->container['invoice_document_url'] = isset($data['invoice_document_url']) ? $data['invoice_document_url'] : null;
        $this->container['last_change'] = isset($data['last_change']) ? $data['last_change'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['currency_id'] === null) {
            $invalidProperties[] = "'currency_id' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ($this->container['order_items'] === null) {
            $invalidProperties[] = "'order_items' can't be null";
        }
        if ($this->container['invoicing_data'] === null) {
            $invalidProperties[] = "'invoicing_data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The unique ID of the order.
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number External order number. If not set, internal order number will be set.
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The unique ID of the customer, owner of the order.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id ID of the currency.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float $total_price Total price of the order.
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets discount_codes
     *
     * @return string[]
     */
    public function getDiscountCodes()
    {
        return $this->container['discount_codes'];
    }

    /**
     * Sets discount_codes
     *
     * @param string[] $discount_codes Discount codes used in the order.
     *
     * @return $this
     */
    public function setDiscountCodes($discount_codes)
    {
        $this->container['discount_codes'] = $discount_codes;

        return $this;
    }

    /**
     * Gets order_items
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\OrderItem[]
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\OrderItem[] $order_items List of the OrderItems.
     *
     * @return $this
     */
    public function setOrderItems($order_items)
    {
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets invoicing_data
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\OrderInvoicing
     */
    public function getInvoicingData()
    {
        return $this->container['invoicing_data'];
    }

    /**
     * Sets invoicing_data
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\OrderInvoicing $invoicing_data invoicing_data
     *
     * @return $this
     */
    public function setInvoicingData($invoicing_data)
    {
        $this->container['invoicing_data'] = $invoicing_data;

        return $this;
    }

    /**
     * Gets shipping_data
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\OrderShipping
     */
    public function getShippingData()
    {
        return $this->container['shipping_data'];
    }

    /**
     * Sets shipping_data
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\OrderShipping $shipping_data shipping_data
     *
     * @return $this
     */
    public function setShippingData($shipping_data)
    {
        $this->container['shipping_data'] = $shipping_data;

        return $this;
    }

    /**
     * Gets customer_note
     *
     * @return string
     */
    public function getCustomerNote()
    {
        return $this->container['customer_note'];
    }

    /**
     * Sets customer_note
     *
     * @param string $customer_note Customer’s note for the merchant.
     *
     * @return $this
     */
    public function setCustomerNote($customer_note)
    {
        $this->container['customer_note'] = $customer_note;

        return $this;
    }

    /**
     * Gets order_status
     *
     * @return string
     */
    public function getOrderStatus()
    {
        return $this->container['order_status'];
    }

    /**
     * Sets order_status
     *
     * @param string $order_status Text representation of the order status.
     *
     * @return $this
     */
    public function setOrderStatus($order_status)
    {
        $this->container['order_status'] = $order_status;

        return $this;
    }

    /**
     * Gets shipping_date
     *
     * @return string
     */
    public function getShippingDate()
    {
        return $this->container['shipping_date'];
    }

    /**
     * Sets shipping_date
     *
     * @param string $shipping_date Date of the order shipping. If the date is in future, order should be shipped in this date.
     *
     * @return $this
     */
    public function setShippingDate($shipping_date)
    {
        $this->container['shipping_date'] = $shipping_date;

        return $this;
    }

    /**
     * Gets program_ranking
     *
     * @return int
     */
    public function getProgramRanking()
    {
        return $this->container['program_ranking'];
    }

    /**
     * Sets program_ranking
     *
     * @param int $program_ranking Rank of order in case of the series of multiple orders.
     *
     * @return $this
     */
    public function setProgramRanking($program_ranking)
    {
        $this->container['program_ranking'] = $program_ranking;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string $payment_status Text representation of the payment status.
     *
     * @return $this
     */
    public function setPaymentStatus($payment_status)
    {
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets invoice_document_url
     *
     * @return string
     */
    public function getInvoiceDocumentUrl()
    {
        return $this->container['invoice_document_url'];
    }

    /**
     * Sets invoice_document_url
     *
     * @param string $invoice_document_url URL address with the invoice PDF.
     *
     * @return $this
     */
    public function setInvoiceDocumentUrl($invoice_document_url)
    {
        $this->container['invoice_document_url'] = $invoice_document_url;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return string
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param string $last_change Date and time of the last change. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
