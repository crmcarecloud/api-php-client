<?php
/**
 * MessageTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * MessageTemplate Class Doc Comment
 *
 * @category Class
 * @description Message template resource.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessageTemplate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MessageTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'message_template_id' => 'string',
        'consent_free_template' => 'bool',
        'subject' => 'string',
        'sender' => 'string',
        'name' => 'string',
        'message_template_group_id' => 'int',
        'communication_channel_id' => 'int',
        'template_data' => '\CrmCareCloud\Webservice\RestApi\Client\Model\Parameter[]',
        'last_change' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'message_template_id' => null,
        'consent_free_template' => null,
        'subject' => null,
        'sender' => null,
        'name' => null,
        'message_template_group_id' => null,
        'communication_channel_id' => null,
        'template_data' => null,
        'last_change' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'message_template_id' => 'message_template_id',
        'consent_free_template' => 'consent_free_template',
        'subject' => 'subject',
        'sender' => 'sender',
        'name' => 'name',
        'message_template_group_id' => 'message_template_group_id',
        'communication_channel_id' => 'communication_channel_id',
        'template_data' => 'template_data',
        'last_change' => 'last_change'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'message_template_id' => 'setMessageTemplateId',
        'consent_free_template' => 'setConsentFreeTemplate',
        'subject' => 'setSubject',
        'sender' => 'setSender',
        'name' => 'setName',
        'message_template_group_id' => 'setMessageTemplateGroupId',
        'communication_channel_id' => 'setCommunicationChannelId',
        'template_data' => 'setTemplateData',
        'last_change' => 'setLastChange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'message_template_id' => 'getMessageTemplateId',
        'consent_free_template' => 'getConsentFreeTemplate',
        'subject' => 'getSubject',
        'sender' => 'getSender',
        'name' => 'getName',
        'message_template_group_id' => 'getMessageTemplateGroupId',
        'communication_channel_id' => 'getCommunicationChannelId',
        'template_data' => 'getTemplateData',
        'last_change' => 'getLastChange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MESSAGE_TEMPLATE_GROUP_ID_1 = 1;
const MESSAGE_TEMPLATE_GROUP_ID_2 = 2;
const MESSAGE_TEMPLATE_GROUP_ID_3 = 3;
const COMMUNICATION_CHANNEL_ID_1 = 1;
const COMMUNICATION_CHANNEL_ID_2 = 2;
const COMMUNICATION_CHANNEL_ID_4 = 4;
const COMMUNICATION_CHANNEL_ID_5 = 5;
const COMMUNICATION_CHANNEL_ID_9 = 9;

    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getMessageTemplateGroupIdAllowableValues()
    {
        return [
            self::MESSAGE_TEMPLATE_GROUP_ID_1,
self::MESSAGE_TEMPLATE_GROUP_ID_2,
self::MESSAGE_TEMPLATE_GROUP_ID_3,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getCommunicationChannelIdAllowableValues()
    {
        return [
            self::COMMUNICATION_CHANNEL_ID_1,
self::COMMUNICATION_CHANNEL_ID_2,
self::COMMUNICATION_CHANNEL_ID_4,
self::COMMUNICATION_CHANNEL_ID_5,
self::COMMUNICATION_CHANNEL_ID_9,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['message_template_id'] = isset($data['message_template_id']) ? $data['message_template_id'] : null;
        $this->container['consent_free_template'] = isset($data['consent_free_template']) ? $data['consent_free_template'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['message_template_group_id'] = isset($data['message_template_group_id']) ? $data['message_template_group_id'] : null;
        $this->container['communication_channel_id'] = isset($data['communication_channel_id']) ? $data['communication_channel_id'] : null;
        $this->container['template_data'] = isset($data['template_data']) ? $data['template_data'] : null;
        $this->container['last_change'] = isset($data['last_change']) ? $data['last_change'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['sender'] === null) {
            $invalidProperties[] = "'sender' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['message_template_group_id'] === null) {
            $invalidProperties[] = "'message_template_group_id' can't be null";
        }
        $allowedValues = $this->getMessageTemplateGroupIdAllowableValues();
        if (!is_null($this->container['message_template_group_id']) && !in_array($this->container['message_template_group_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'message_template_group_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['communication_channel_id'] === null) {
            $invalidProperties[] = "'communication_channel_id' can't be null";
        }
        $allowedValues = $this->getCommunicationChannelIdAllowableValues();
        if (!is_null($this->container['communication_channel_id']) && !in_array($this->container['communication_channel_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'communication_channel_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets message_template_id
     *
     * @return string
     */
    public function getMessageTemplateId()
    {
        return $this->container['message_template_id'];
    }

    /**
     * Sets message_template_id
     *
     * @param string $message_template_id The unique ID of the message_template.
     *
     * @return $this
     */
    public function setMessageTemplateId($message_template_id)
    {
        $this->container['message_template_id'] = $message_template_id;

        return $this;
    }

    /**
     * Gets consent_free_template
     *
     * @return bool
     */
    public function getConsentFreeTemplate()
    {
        return $this->container['consent_free_template'];
    }

    /**
     * Sets consent_free_template
     *
     * @param bool $consent_free_template If true, customer can receive message without any consent(GDPR, etc.).
     *
     * @return $this
     */
    public function setConsentFreeTemplate($consent_free_template)
    {
        $this->container['consent_free_template'] = $consent_free_template;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject of the message template. Mandatory only in case of email template.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender Sender of the message template.
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the message template.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets message_template_group_id
     *
     * @return int
     */
    public function getMessageTemplateGroupId()
    {
        return $this->container['message_template_group_id'];
    }

    /**
     * Sets message_template_group_id
     *
     * @param int $message_template_group_id The unique ID of the message template group. *Possible values are: 1 - newsletter template / 2 - system template (registration message, order summary message, etc.) / 3 - transactional communication (for hotel, traveling,...)*
     *
     * @return $this
     */
    public function setMessageTemplateGroupId($message_template_group_id)
    {
        $allowedValues = $this->getMessageTemplateGroupIdAllowableValues();
        if (!in_array($message_template_group_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'message_template_group_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['message_template_group_id'] = $message_template_group_id;

        return $this;
    }

    /**
     * Gets communication_channel_id
     *
     * @return int
     */
    public function getCommunicationChannelId()
    {
        return $this->container['communication_channel_id'];
    }

    /**
     * Sets communication_channel_id
     *
     * @param int $communication_channel_id The unique ID of the communication channel. *Possible values are: 1 - email / 2 - SMS / 4 - PUSH notification (Apple or Google)/ 5 - internal system notification / 9 - Viber messages*
     *
     * @return $this
     */
    public function setCommunicationChannelId($communication_channel_id)
    {
        $allowedValues = $this->getCommunicationChannelIdAllowableValues();
        if (!in_array($communication_channel_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'communication_channel_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['communication_channel_id'] = $communication_channel_id;

        return $this;
    }

    /**
     * Gets template_data
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\Parameter[]
     */
    public function getTemplateData()
    {
        return $this->container['template_data'];
    }

    /**
     * Sets template_data
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\Parameter[] $template_data Template data could contains array of customized parameters. They may have influence on template display or add values to template.
     *
     * @return $this
     */
    public function setTemplateData($template_data)
    {
        $this->container['template_data'] = $template_data;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return string
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param string $last_change Date and time of the last change. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
