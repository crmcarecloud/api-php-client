<?php
/**
 * Purchase
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * Purchase Class Doc Comment
 *
 * @category Class
 * @description Purchase.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Purchase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Purchase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'purchase_id' => 'string',
        'customer_id' => 'string',
        'store_id' => 'string',
        'external_purchase_id' => 'string',
        'payment_time' => 'string',
        'items_count' => 'int',
        'purchase_items' => '\CrmCareCloud\Webservice\RestApi\Client\Model\PurchaseItem[]',
        'type_id' => 'string',
        'total_price' => 'float',
        'currency_id' => 'string',
        'card_number' => 'string',
        'cashdesk_number' => 'string',
        'last_change' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'purchase_id' => null,
        'customer_id' => null,
        'store_id' => null,
        'external_purchase_id' => null,
        'payment_time' => null,
        'items_count' => null,
        'purchase_items' => null,
        'type_id' => null,
        'total_price' => 'float',
        'currency_id' => null,
        'card_number' => null,
        'cashdesk_number' => null,
        'last_change' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchase_id' => 'purchase_id',
        'customer_id' => 'customer_id',
        'store_id' => 'store_id',
        'external_purchase_id' => 'external_purchase_id',
        'payment_time' => 'payment_time',
        'items_count' => 'items_count',
        'purchase_items' => 'purchase_items',
        'type_id' => 'type_id',
        'total_price' => 'total_price',
        'currency_id' => 'currency_id',
        'card_number' => 'card_number',
        'cashdesk_number' => 'cashdesk_number',
        'last_change' => 'last_change'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchase_id' => 'setPurchaseId',
        'customer_id' => 'setCustomerId',
        'store_id' => 'setStoreId',
        'external_purchase_id' => 'setExternalPurchaseId',
        'payment_time' => 'setPaymentTime',
        'items_count' => 'setItemsCount',
        'purchase_items' => 'setPurchaseItems',
        'type_id' => 'setTypeId',
        'total_price' => 'setTotalPrice',
        'currency_id' => 'setCurrencyId',
        'card_number' => 'setCardNumber',
        'cashdesk_number' => 'setCashdeskNumber',
        'last_change' => 'setLastChange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchase_id' => 'getPurchaseId',
        'customer_id' => 'getCustomerId',
        'store_id' => 'getStoreId',
        'external_purchase_id' => 'getExternalPurchaseId',
        'payment_time' => 'getPaymentTime',
        'items_count' => 'getItemsCount',
        'purchase_items' => 'getPurchaseItems',
        'type_id' => 'getTypeId',
        'total_price' => 'getTotalPrice',
        'currency_id' => 'getCurrencyId',
        'card_number' => 'getCardNumber',
        'cashdesk_number' => 'getCashdeskNumber',
        'last_change' => 'getLastChange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['purchase_id'] = isset($data['purchase_id']) ? $data['purchase_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['external_purchase_id'] = isset($data['external_purchase_id']) ? $data['external_purchase_id'] : null;
        $this->container['payment_time'] = isset($data['payment_time']) ? $data['payment_time'] : null;
        $this->container['items_count'] = isset($data['items_count']) ? $data['items_count'] : null;
        $this->container['purchase_items'] = isset($data['purchase_items']) ? $data['purchase_items'] : null;
        $this->container['type_id'] = isset($data['type_id']) ? $data['type_id'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['cashdesk_number'] = isset($data['cashdesk_number']) ? $data['cashdesk_number'] : null;
        $this->container['last_change'] = isset($data['last_change']) ? $data['last_change'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['store_id'] === null) {
            $invalidProperties[] = "'store_id' can't be null";
        }
        if ($this->container['external_purchase_id'] === null) {
            $invalidProperties[] = "'external_purchase_id' can't be null";
        }
        if ($this->container['payment_time'] === null) {
            $invalidProperties[] = "'payment_time' can't be null";
        }
        if ($this->container['items_count'] === null) {
            $invalidProperties[] = "'items_count' can't be null";
        }
        if ($this->container['type_id'] === null) {
            $invalidProperties[] = "'type_id' can't be null";
        }
        if ($this->container['total_price'] === null) {
            $invalidProperties[] = "'total_price' can't be null";
        }
        if ($this->container['currency_id'] === null) {
            $invalidProperties[] = "'currency_id' can't be null";
        }
        if ($this->container['cashdesk_number'] === null) {
            $invalidProperties[] = "'cashdesk_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchase_id
     *
     * @return string
     */
    public function getPurchaseId()
    {
        return $this->container['purchase_id'];
    }

    /**
     * Sets purchase_id
     *
     * @param string $purchase_id The unique ID of the purchase.
     *
     * @return $this
     */
    public function setPurchaseId($purchase_id)
    {
        $this->container['purchase_id'] = $purchase_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The unique ID of the customer.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string $store_id The unique ID of the store in CareCloud.
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets external_purchase_id
     *
     * @return string
     */
    public function getExternalPurchaseId()
    {
        return $this->container['external_purchase_id'];
    }

    /**
     * Sets external_purchase_id
     *
     * @param string $external_purchase_id The external unique ID of the purchase.
     *
     * @return $this
     */
    public function setExternalPurchaseId($external_purchase_id)
    {
        $this->container['external_purchase_id'] = $external_purchase_id;

        return $this;
    }

    /**
     * Gets payment_time
     *
     * @return string
     */
    public function getPaymentTime()
    {
        return $this->container['payment_time'];
    }

    /**
     * Sets payment_time
     *
     * @param string $payment_time Date and time of the purchase payment. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setPaymentTime($payment_time)
    {
        $this->container['payment_time'] = $payment_time;

        return $this;
    }

    /**
     * Gets items_count
     *
     * @return int
     */
    public function getItemsCount()
    {
        return $this->container['items_count'];
    }

    /**
     * Sets items_count
     *
     * @param int $items_count Count of the purchase items.
     *
     * @return $this
     */
    public function setItemsCount($items_count)
    {
        $this->container['items_count'] = $items_count;

        return $this;
    }

    /**
     * Gets purchase_items
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\PurchaseItem[]
     */
    public function getPurchaseItems()
    {
        return $this->container['purchase_items'];
    }

    /**
     * Sets purchase_items
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\PurchaseItem[] $purchase_items List of all items of the purchase. Data is returned if query parameter purchase_items_extension has value true in the query string of the request.
     *
     * @return $this
     */
    public function setPurchaseItems($purchase_items)
    {
        $this->container['purchase_items'] = $purchase_items;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return string
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param string $type_id Purchase type.
     *
     * @return $this
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float $total_price Total price of the purchase.
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id The unique ID of the currency.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number Purchasing customer card number.
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets cashdesk_number
     *
     * @return string
     */
    public function getCashdeskNumber()
    {
        return $this->container['cashdesk_number'];
    }

    /**
     * Sets cashdesk_number
     *
     * @param string $cashdesk_number Number of the cash-desk
     *
     * @return $this
     */
    public function setCashdeskNumber($cashdesk_number)
    {
        $this->container['cashdesk_number'] = $cashdesk_number;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return string
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param string $last_change Date and time of the last change. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
