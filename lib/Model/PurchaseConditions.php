<?php
/**
 * PurchaseConditions
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * PurchaseConditions Class Doc Comment
 *
 * @category Class
 * @description Structure contains purchase conditions of the status record.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseConditions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseConditions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'keep_status_turnover' => '\CrmCareCloud\Webservice\RestApi\Client\Model\QualificationTurnover[]',
        'next_status_turnover' => '\CrmCareCloud\Webservice\RestApi\Client\Model\QualificationTurnover[]',
        'keep_status_points' => 'float',
        'next_status_points' => 'float',
        'next_status_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'keep_status_turnover' => null,
        'next_status_turnover' => null,
        'keep_status_points' => 'float',
        'next_status_points' => 'float',
        'next_status_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'keep_status_turnover' => 'keep_status_turnover',
        'next_status_turnover' => 'next_status_turnover',
        'keep_status_points' => 'keep_status_points',
        'next_status_points' => 'next_status_points',
        'next_status_id' => 'next_status_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'keep_status_turnover' => 'setKeepStatusTurnover',
        'next_status_turnover' => 'setNextStatusTurnover',
        'keep_status_points' => 'setKeepStatusPoints',
        'next_status_points' => 'setNextStatusPoints',
        'next_status_id' => 'setNextStatusId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'keep_status_turnover' => 'getKeepStatusTurnover',
        'next_status_turnover' => 'getNextStatusTurnover',
        'keep_status_points' => 'getKeepStatusPoints',
        'next_status_points' => 'getNextStatusPoints',
        'next_status_id' => 'getNextStatusId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['keep_status_turnover'] = isset($data['keep_status_turnover']) ? $data['keep_status_turnover'] : null;
        $this->container['next_status_turnover'] = isset($data['next_status_turnover']) ? $data['next_status_turnover'] : null;
        $this->container['keep_status_points'] = isset($data['keep_status_points']) ? $data['keep_status_points'] : null;
        $this->container['next_status_points'] = isset($data['next_status_points']) ? $data['next_status_points'] : null;
        $this->container['next_status_id'] = isset($data['next_status_id']) ? $data['next_status_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets keep_status_turnover
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\QualificationTurnover[]
     */
    public function getKeepStatusTurnover()
    {
        return $this->container['keep_status_turnover'];
    }

    /**
     * Sets keep_status_turnover
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\QualificationTurnover[] $keep_status_turnover Missing turnover to keep current status in every active currency.
     *
     * @return $this
     */
    public function setKeepStatusTurnover($keep_status_turnover)
    {
        $this->container['keep_status_turnover'] = $keep_status_turnover;

        return $this;
    }

    /**
     * Gets next_status_turnover
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\QualificationTurnover[]
     */
    public function getNextStatusTurnover()
    {
        return $this->container['next_status_turnover'];
    }

    /**
     * Sets next_status_turnover
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\QualificationTurnover[] $next_status_turnover Missing turnover to the next status in every active currency.
     *
     * @return $this
     */
    public function setNextStatusTurnover($next_status_turnover)
    {
        $this->container['next_status_turnover'] = $next_status_turnover;

        return $this;
    }

    /**
     * Gets keep_status_points
     *
     * @return float
     */
    public function getKeepStatusPoints()
    {
        return $this->container['keep_status_points'];
    }

    /**
     * Sets keep_status_points
     *
     * @param float $keep_status_points Amount of points a customer needs to keep current status.
     *
     * @return $this
     */
    public function setKeepStatusPoints($keep_status_points)
    {
        $this->container['keep_status_points'] = $keep_status_points;

        return $this;
    }

    /**
     * Gets next_status_points
     *
     * @return float
     */
    public function getNextStatusPoints()
    {
        return $this->container['next_status_points'];
    }

    /**
     * Sets next_status_points
     *
     * @param float $next_status_points Amount of points a customer needs to move to the following status.
     *
     * @return $this
     */
    public function setNextStatusPoints($next_status_points)
    {
        $this->container['next_status_points'] = $next_status_points;

        return $this;
    }

    /**
     * Gets next_status_id
     *
     * @return string
     */
    public function getNextStatusId()
    {
        return $this->container['next_status_id'];
    }

    /**
     * Sets next_status_id
     *
     * @param string $next_status_id ID of the following status.
     *
     * @return $this
     */
    public function setNextStatusId($next_status_id)
    {
        $this->container['next_status_id'] = $next_status_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
