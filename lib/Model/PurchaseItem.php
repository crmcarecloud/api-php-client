<?php
/**
 * PurchaseItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.55
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * PurchaseItem Class Doc Comment
 *
 * @category Class
 * @description Purchase item.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'purchase_item_id' => 'string',
        'product_id' => 'string',
        'product_name' => 'string',
        'product_group_id' => 'string',
        'product_group_name' => 'string',
        'product_brand_id' => 'string',
        'product_brand_name' => 'string',
        'external_id' => 'string',
        'purchase_item_type_id' => 'string',
        'price' => 'float',
        'amount' => 'float',
        'vat_rate' => 'float',
        'additional_properties' => '\CrmCareCloud\Webservice\RestApi\Client\Model\PropertyRecord[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'purchase_item_id' => null,
        'product_id' => null,
        'product_name' => null,
        'product_group_id' => null,
        'product_group_name' => null,
        'product_brand_id' => null,
        'product_brand_name' => null,
        'external_id' => null,
        'purchase_item_type_id' => null,
        'price' => 'float',
        'amount' => 'float',
        'vat_rate' => 'float',
        'additional_properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchase_item_id' => 'purchase_item_id',
        'product_id' => 'product_id',
        'product_name' => 'product_name',
        'product_group_id' => 'product_group_id',
        'product_group_name' => 'product_group_name',
        'product_brand_id' => 'product_brand_id',
        'product_brand_name' => 'product_brand_name',
        'external_id' => 'external_id',
        'purchase_item_type_id' => 'purchase_item_type_id',
        'price' => 'price',
        'amount' => 'amount',
        'vat_rate' => 'vat_rate',
        'additional_properties' => 'additional_properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchase_item_id' => 'setPurchaseItemId',
        'product_id' => 'setProductId',
        'product_name' => 'setProductName',
        'product_group_id' => 'setProductGroupId',
        'product_group_name' => 'setProductGroupName',
        'product_brand_id' => 'setProductBrandId',
        'product_brand_name' => 'setProductBrandName',
        'external_id' => 'setExternalId',
        'purchase_item_type_id' => 'setPurchaseItemTypeId',
        'price' => 'setPrice',
        'amount' => 'setAmount',
        'vat_rate' => 'setVatRate',
        'additional_properties' => 'setAdditionalProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchase_item_id' => 'getPurchaseItemId',
        'product_id' => 'getProductId',
        'product_name' => 'getProductName',
        'product_group_id' => 'getProductGroupId',
        'product_group_name' => 'getProductGroupName',
        'product_brand_id' => 'getProductBrandId',
        'product_brand_name' => 'getProductBrandName',
        'external_id' => 'getExternalId',
        'purchase_item_type_id' => 'getPurchaseItemTypeId',
        'price' => 'getPrice',
        'amount' => 'getAmount',
        'vat_rate' => 'getVatRate',
        'additional_properties' => 'getAdditionalProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['purchase_item_id'] = isset($data['purchase_item_id']) ? $data['purchase_item_id'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['product_group_id'] = isset($data['product_group_id']) ? $data['product_group_id'] : null;
        $this->container['product_group_name'] = isset($data['product_group_name']) ? $data['product_group_name'] : null;
        $this->container['product_brand_id'] = isset($data['product_brand_id']) ? $data['product_brand_id'] : null;
        $this->container['product_brand_name'] = isset($data['product_brand_name']) ? $data['product_brand_name'] : null;
        $this->container['external_id'] = isset($data['external_id']) ? $data['external_id'] : null;
        $this->container['purchase_item_type_id'] = isset($data['purchase_item_type_id']) ? $data['purchase_item_type_id'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['vat_rate'] = isset($data['vat_rate']) ? $data['vat_rate'] : null;
        $this->container['additional_properties'] = isset($data['additional_properties']) ? $data['additional_properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product_id'] === null) {
            $invalidProperties[] = "'product_id' can't be null";
        }
        if ($this->container['purchase_item_type_id'] === null) {
            $invalidProperties[] = "'purchase_item_type_id' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['vat_rate'] === null) {
            $invalidProperties[] = "'vat_rate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchase_item_id
     *
     * @return string
     */
    public function getPurchaseItemId()
    {
        return $this->container['purchase_item_id'];
    }

    /**
     * Sets purchase_item_id
     *
     * @param string $purchase_item_id The unique ID of the purchase item.
     *
     * @return $this
     */
    public function setPurchaseItemId($purchase_item_id)
    {
        $this->container['purchase_item_id'] = $purchase_item_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string $product_id The unique ID of the [product](https://carecloud.readme.io/reference/getproducts).
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name The unique name of the [product](https://carecloud.readme.io/reference/getproducts).
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_group_id
     *
     * @return string
     */
    public function getProductGroupId()
    {
        return $this->container['product_group_id'];
    }

    /**
     * Sets product_group_id
     *
     * @param string $product_group_id The unique ID of the product group.
     *
     * @return $this
     */
    public function setProductGroupId($product_group_id)
    {
        $this->container['product_group_id'] = $product_group_id;

        return $this;
    }

    /**
     * Gets product_group_name
     *
     * @return string
     */
    public function getProductGroupName()
    {
        return $this->container['product_group_name'];
    }

    /**
     * Sets product_group_name
     *
     * @param string $product_group_name The unique ID of the product group.
     *
     * @return $this
     */
    public function setProductGroupName($product_group_name)
    {
        $this->container['product_group_name'] = $product_group_name;

        return $this;
    }

    /**
     * Gets product_brand_id
     *
     * @return string
     */
    public function getProductBrandId()
    {
        return $this->container['product_brand_id'];
    }

    /**
     * Sets product_brand_id
     *
     * @param string $product_brand_id The unique ID of the product brand.
     *
     * @return $this
     */
    public function setProductBrandId($product_brand_id)
    {
        $this->container['product_brand_id'] = $product_brand_id;

        return $this;
    }

    /**
     * Gets product_brand_name
     *
     * @return string
     */
    public function getProductBrandName()
    {
        return $this->container['product_brand_name'];
    }

    /**
     * Sets product_brand_name
     *
     * @param string $product_brand_name The unique ID of the product brand.
     *
     * @return $this
     */
    public function setProductBrandName($product_brand_name)
    {
        $this->container['product_brand_name'] = $product_brand_name;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string $external_id Identifier of the purchase item in external system.
     *
     * @return $this
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets purchase_item_type_id
     *
     * @return string
     */
    public function getPurchaseItemTypeId()
    {
        return $this->container['purchase_item_type_id'];
    }

    /**
     * Sets purchase_item_type_id
     *
     * @param string $purchase_item_type_id Type of the purchase item.There is a distinction between a purchase in an e-shop, in a brick-and-mortar store, a mobile application, or a cancellation of the purchase. It also differentiates purchases without the possibility of applying loyalty benefits from ordinary purchases or from purchases with the application of loyalty points.
     *
     * @return $this
     */
    public function setPurchaseItemTypeId($purchase_item_type_id)
    {
        $this->container['purchase_item_type_id'] = $purchase_item_type_id;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Price of the purchase item.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount Amount of the purchase item.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float $vat_rate The rate of an item VAT.
     *
     * @return $this
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets additional_properties
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\PropertyRecord[]
     */
    public function getAdditionalProperties()
    {
        return $this->container['additional_properties'];
    }

    /**
     * Sets additional_properties
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\PropertyRecord[] $additional_properties List of additional properties.
     *
     * @return $this
     */
    public function setAdditionalProperties($additional_properties)
    {
        $this->container['additional_properties'] = $additional_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
