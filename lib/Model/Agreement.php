<?php
/**
 * Agreement
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * Agreement Class Doc Comment
 *
 * @category Class
 * @description Customer&#x27;s consents.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Agreement implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Agreement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'agreement_gtc' => 'int',
        'agreement_profiling' => 'int',
        'agreement_marketing_communication' => 'int',
        'custom_agreements' => '\CrmCareCloud\Webservice\RestApi\Client\Model\CustomAgreements[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'agreement_gtc' => null,
        'agreement_profiling' => null,
        'agreement_marketing_communication' => null,
        'custom_agreements' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'agreement_gtc' => 'agreement_gtc',
        'agreement_profiling' => 'agreement_profiling',
        'agreement_marketing_communication' => 'agreement_marketing_communication',
        'custom_agreements' => 'custom_agreements'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'agreement_gtc' => 'setAgreementGtc',
        'agreement_profiling' => 'setAgreementProfiling',
        'agreement_marketing_communication' => 'setAgreementMarketingCommunication',
        'custom_agreements' => 'setCustomAgreements'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'agreement_gtc' => 'getAgreementGtc',
        'agreement_profiling' => 'getAgreementProfiling',
        'agreement_marketing_communication' => 'getAgreementMarketingCommunication',
        'custom_agreements' => 'getCustomAgreements'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AGREEMENT_GTC_0 = 0;
const AGREEMENT_GTC_1 = 1;
const AGREEMENT_GTC_2 = 2;
const AGREEMENT_PROFILING_0 = 0;
const AGREEMENT_PROFILING_1 = 1;
const AGREEMENT_PROFILING_2 = 2;
const AGREEMENT_MARKETING_COMMUNICATION_0 = 0;
const AGREEMENT_MARKETING_COMMUNICATION_1 = 1;
const AGREEMENT_MARKETING_COMMUNICATION_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getAgreementGtcAllowableValues()
    {
        return [
            self::AGREEMENT_GTC_0,
self::AGREEMENT_GTC_1,
self::AGREEMENT_GTC_2,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getAgreementProfilingAllowableValues()
    {
        return [
            self::AGREEMENT_PROFILING_0,
self::AGREEMENT_PROFILING_1,
self::AGREEMENT_PROFILING_2,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getAgreementMarketingCommunicationAllowableValues()
    {
        return [
            self::AGREEMENT_MARKETING_COMMUNICATION_0,
self::AGREEMENT_MARKETING_COMMUNICATION_1,
self::AGREEMENT_MARKETING_COMMUNICATION_2,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['agreement_gtc'] = isset($data['agreement_gtc']) ? $data['agreement_gtc'] : null;
        $this->container['agreement_profiling'] = isset($data['agreement_profiling']) ? $data['agreement_profiling'] : null;
        $this->container['agreement_marketing_communication'] = isset($data['agreement_marketing_communication']) ? $data['agreement_marketing_communication'] : null;
        $this->container['custom_agreements'] = isset($data['custom_agreements']) ? $data['custom_agreements'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['agreement_gtc'] === null) {
            $invalidProperties[] = "'agreement_gtc' can't be null";
        }
        $allowedValues = $this->getAgreementGtcAllowableValues();
        if (!is_null($this->container['agreement_gtc']) && !in_array($this->container['agreement_gtc'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'agreement_gtc', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['agreement_profiling'] === null) {
            $invalidProperties[] = "'agreement_profiling' can't be null";
        }
        $allowedValues = $this->getAgreementProfilingAllowableValues();
        if (!is_null($this->container['agreement_profiling']) && !in_array($this->container['agreement_profiling'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'agreement_profiling', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['agreement_marketing_communication'] === null) {
            $invalidProperties[] = "'agreement_marketing_communication' can't be null";
        }
        $allowedValues = $this->getAgreementMarketingCommunicationAllowableValues();
        if (!is_null($this->container['agreement_marketing_communication']) && !in_array($this->container['agreement_marketing_communication'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'agreement_marketing_communication', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets agreement_gtc
     *
     * @return int
     */
    public function getAgreementGtc()
    {
        return $this->container['agreement_gtc'];
    }

    /**
     * Sets agreement_gtc
     *
     * @param int $agreement_gtc Consent to General Terms & Conditions. *Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set*
     *
     * @return $this
     */
    public function setAgreementGtc($agreement_gtc)
    {
        $allowedValues = $this->getAgreementGtcAllowableValues();
        if (!in_array($agreement_gtc, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'agreement_gtc', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['agreement_gtc'] = $agreement_gtc;

        return $this;
    }

    /**
     * Gets agreement_profiling
     *
     * @return int
     */
    public function getAgreementProfiling()
    {
        return $this->container['agreement_profiling'];
    }

    /**
     * Sets agreement_profiling
     *
     * @param int $agreement_profiling Consent to profiling. *Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set*
     *
     * @return $this
     */
    public function setAgreementProfiling($agreement_profiling)
    {
        $allowedValues = $this->getAgreementProfilingAllowableValues();
        if (!in_array($agreement_profiling, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'agreement_profiling', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['agreement_profiling'] = $agreement_profiling;

        return $this;
    }

    /**
     * Gets agreement_marketing_communication
     *
     * @return int
     */
    public function getAgreementMarketingCommunication()
    {
        return $this->container['agreement_marketing_communication'];
    }

    /**
     * Sets agreement_marketing_communication
     *
     * @param int $agreement_marketing_communication Consent to marketing communication. *Possible values: 0 - no, consent canceled / 1 - yes, consent given / 2 - consent not set*
     *
     * @return $this
     */
    public function setAgreementMarketingCommunication($agreement_marketing_communication)
    {
        $allowedValues = $this->getAgreementMarketingCommunicationAllowableValues();
        if (!in_array($agreement_marketing_communication, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'agreement_marketing_communication', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['agreement_marketing_communication'] = $agreement_marketing_communication;

        return $this;
    }

    /**
     * Gets custom_agreements
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\CustomAgreements[]
     */
    public function getCustomAgreements()
    {
        return $this->container['custom_agreements'];
    }

    /**
     * Sets custom_agreements
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\CustomAgreements[] $custom_agreements Custom agreements.
     *
     * @return $this
     */
    public function setCustomAgreements($custom_agreements)
    {
        $this->container['custom_agreements'] = $custom_agreements;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
