<?php
/**
 * StamperCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * Discover the essentials of the CareCloud platform API, from authentication methods to available resources. Explore the REST API, which allows you to seamlessly connect the CareCloud platform with other systems.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.55
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * StamperCard Class Doc Comment
 *
 * @category Class
 * @description Stamper card resource.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StamperCard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StamperCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'stamper_card_id' => 'string',
        'stamper_campaign_id' => 'string',
        'customer_id' => 'string',
        'stamper_card_order' => 'int',
        'is_filled_up' => 'bool',
        'stamps' => '\CrmCareCloud\Webservice\RestApi\Client\Model\StamperStamp[]',
        'created_at' => 'string',
        'last_change' => 'string',
        'state' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'stamper_card_id' => null,
        'stamper_campaign_id' => null,
        'customer_id' => null,
        'stamper_card_order' => null,
        'is_filled_up' => null,
        'stamps' => null,
        'created_at' => null,
        'last_change' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stamper_card_id' => 'stamper_card_id',
        'stamper_campaign_id' => 'stamper_campaign_id',
        'customer_id' => 'customer_id',
        'stamper_card_order' => 'stamper_card_order',
        'is_filled_up' => 'is_filled_up',
        'stamps' => 'stamps',
        'created_at' => 'created_at',
        'last_change' => 'last_change',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stamper_card_id' => 'setStamperCardId',
        'stamper_campaign_id' => 'setStamperCampaignId',
        'customer_id' => 'setCustomerId',
        'stamper_card_order' => 'setStamperCardOrder',
        'is_filled_up' => 'setIsFilledUp',
        'stamps' => 'setStamps',
        'created_at' => 'setCreatedAt',
        'last_change' => 'setLastChange',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stamper_card_id' => 'getStamperCardId',
        'stamper_campaign_id' => 'getStamperCampaignId',
        'customer_id' => 'getCustomerId',
        'stamper_card_order' => 'getStamperCardOrder',
        'is_filled_up' => 'getIsFilledUp',
        'stamps' => 'getStamps',
        'created_at' => 'getCreatedAt',
        'last_change' => 'getLastChange',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_0 = 0;
const STATE_1 = 1;

    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_0,
self::STATE_1,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stamper_card_id'] = isset($data['stamper_card_id']) ? $data['stamper_card_id'] : null;
        $this->container['stamper_campaign_id'] = isset($data['stamper_campaign_id']) ? $data['stamper_campaign_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['stamper_card_order'] = isset($data['stamper_card_order']) ? $data['stamper_card_order'] : null;
        $this->container['is_filled_up'] = isset($data['is_filled_up']) ? $data['is_filled_up'] : null;
        $this->container['stamps'] = isset($data['stamps']) ? $data['stamps'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['last_change'] = isset($data['last_change']) ? $data['last_change'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stamper_card_id
     *
     * @return string
     */
    public function getStamperCardId()
    {
        return $this->container['stamper_card_id'];
    }

    /**
     * Sets stamper_card_id
     *
     * @param string $stamper_card_id The unique ID of the stamper card.
     *
     * @return $this
     */
    public function setStamperCardId($stamper_card_id)
    {
        $this->container['stamper_card_id'] = $stamper_card_id;

        return $this;
    }

    /**
     * Gets stamper_campaign_id
     *
     * @return string
     */
    public function getStamperCampaignId()
    {
        return $this->container['stamper_campaign_id'];
    }

    /**
     * Sets stamper_campaign_id
     *
     * @param string $stamper_campaign_id The unique ID of the stamper campaign that the card is part of. The list of stamper campaign is available at [GET /stamper-campaigns](https://carecloud.readme.io/reference/getstampercampaigns)
     *
     * @return $this
     */
    public function setStamperCampaignId($stamper_campaign_id)
    {
        $this->container['stamper_campaign_id'] = $stamper_campaign_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The unique ID of the card holder.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets stamper_card_order
     *
     * @return int
     */
    public function getStamperCardOrder()
    {
        return $this->container['stamper_card_order'];
    }

    /**
     * Sets stamper_card_order
     *
     * @param int $stamper_card_order An order of the stamper card in the stamper campaign. The stamper campaign can have multiple stamper cards and this parameter determine the order how they were used in the campaign.
     *
     * @return $this
     */
    public function setStamperCardOrder($stamper_card_order)
    {
        $this->container['stamper_card_order'] = $stamper_card_order;

        return $this;
    }

    /**
     * Gets is_filled_up
     *
     * @return bool
     */
    public function getIsFilledUp()
    {
        return $this->container['is_filled_up'];
    }

    /**
     * Sets is_filled_up
     *
     * @param bool $is_filled_up If true, the card contain all stamps. If false, the card has still free spots for the stamp.
     *
     * @return $this
     */
    public function setIsFilledUp($is_filled_up)
    {
        $this->container['is_filled_up'] = $is_filled_up;

        return $this;
    }

    /**
     * Gets stamps
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\StamperStamp[]
     */
    public function getStamps()
    {
        return $this->container['stamps'];
    }

    /**
     * Sets stamps
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\StamperStamp[] $stamps List of all stamps related to the card.
     *
     * @return $this
     */
    public function setStamps($stamps)
    {
        $this->container['stamps'] = $stamps;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at Date and time when stamper card was created. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return string
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param string $last_change Date and time of the last change. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state State of the card. *Possible values are: 0 - blocked / 1 - active*
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
