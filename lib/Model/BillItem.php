<?php
/**
 * BillItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * BillItem Class Doc Comment
 *
 * @category Class
 * @description Bill item structure.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BillItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BillItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'plu_ids' => '\CrmCareCloud\Webservice\RestApi\Client\Model\PluId[]',
'plu_name' => 'string',
'category_plu_id' => 'string',
'vat_rate' => 'float',
'quantity' => 'float',
'paid_amount' => 'float',
'price' => 'float',
'bill_item_id' => 'string',
'loyalty_off' => 'bool',
'purchase_item_type_id' => 'string',
'customer_id' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'plu_ids' => null,
'plu_name' => null,
'category_plu_id' => null,
'vat_rate' => 'float',
'quantity' => 'float',
'paid_amount' => 'float',
'price' => 'float',
'bill_item_id' => null,
'loyalty_off' => null,
'purchase_item_type_id' => null,
'customer_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plu_ids' => 'plu_ids',
'plu_name' => 'plu_name',
'category_plu_id' => 'category_plu_id',
'vat_rate' => 'vat_rate',
'quantity' => 'quantity',
'paid_amount' => 'paid_amount',
'price' => 'price',
'bill_item_id' => 'bill_item_id',
'loyalty_off' => 'loyalty_off',
'purchase_item_type_id' => 'purchase_item_type_id',
'customer_id' => 'customer_id'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plu_ids' => 'setPluIds',
'plu_name' => 'setPluName',
'category_plu_id' => 'setCategoryPluId',
'vat_rate' => 'setVatRate',
'quantity' => 'setQuantity',
'paid_amount' => 'setPaidAmount',
'price' => 'setPrice',
'bill_item_id' => 'setBillItemId',
'loyalty_off' => 'setLoyaltyOff',
'purchase_item_type_id' => 'setPurchaseItemTypeId',
'customer_id' => 'setCustomerId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plu_ids' => 'getPluIds',
'plu_name' => 'getPluName',
'category_plu_id' => 'getCategoryPluId',
'vat_rate' => 'getVatRate',
'quantity' => 'getQuantity',
'paid_amount' => 'getPaidAmount',
'price' => 'getPrice',
'bill_item_id' => 'getBillItemId',
'loyalty_off' => 'getLoyaltyOff',
'purchase_item_type_id' => 'getPurchaseItemTypeId',
'customer_id' => 'getCustomerId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plu_ids'] = isset($data['plu_ids']) ? $data['plu_ids'] : null;
        $this->container['plu_name'] = isset($data['plu_name']) ? $data['plu_name'] : null;
        $this->container['category_plu_id'] = isset($data['category_plu_id']) ? $data['category_plu_id'] : null;
        $this->container['vat_rate'] = isset($data['vat_rate']) ? $data['vat_rate'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['paid_amount'] = isset($data['paid_amount']) ? $data['paid_amount'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['bill_item_id'] = isset($data['bill_item_id']) ? $data['bill_item_id'] : null;
        $this->container['loyalty_off'] = isset($data['loyalty_off']) ? $data['loyalty_off'] : null;
        $this->container['purchase_item_type_id'] = isset($data['purchase_item_type_id']) ? $data['purchase_item_type_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['plu_ids'] === null) {
            $invalidProperties[] = "'plu_ids' can't be null";
        }
        if ($this->container['plu_name'] === null) {
            $invalidProperties[] = "'plu_name' can't be null";
        }
        if ($this->container['vat_rate'] === null) {
            $invalidProperties[] = "'vat_rate' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['paid_amount'] === null) {
            $invalidProperties[] = "'paid_amount' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['bill_item_id'] === null) {
            $invalidProperties[] = "'bill_item_id' can't be null";
        }
        if ($this->container['loyalty_off'] === null) {
            $invalidProperties[] = "'loyalty_off' can't be null";
        }
        if ($this->container['purchase_item_type_id'] === null) {
            $invalidProperties[] = "'purchase_item_type_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plu_ids
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\PluId[]
     */
    public function getPluIds()
    {
        return $this->container['plu_ids'];
    }

    /**
     * Sets plu_ids
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\PluId[] $plu_ids An array of all available pluIds from the particular product lists (default is Product ID from Global product list (consist cleaned data - unique ID of every product across all POS systems)).
     *
     * @return $this
     */
    public function setPluIds($plu_ids)
    {
        $this->container['plu_ids'] = $plu_ids;

        return $this;
    }

    /**
     * Gets plu_name
     *
     * @return string
     */
    public function getPluName()
    {
        return $this->container['plu_name'];
    }

    /**
     * Sets plu_name
     *
     * @param string $plu_name Product name.
     *
     * @return $this
     */
    public function setPluName($plu_name)
    {
        $this->container['plu_name'] = $plu_name;

        return $this;
    }

    /**
     * Gets category_plu_id
     *
     * @return string
     */
    public function getCategoryPluId()
    {
        return $this->container['category_plu_id'];
    }

    /**
     * Sets category_plu_id
     *
     * @param string $category_plu_id Product category ID from Global product list (consist cleaned data - unique ID of every category across all POS systems).
     *
     * @return $this
     */
    public function setCategoryPluId($category_plu_id)
    {
        $this->container['category_plu_id'] = $category_plu_id;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return float
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param float $vat_rate VAT rate of the item.
     *
     * @return $this
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity Quantity of product.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets paid_amount
     *
     * @return float
     */
    public function getPaidAmount()
    {
        return $this->container['paid_amount'];
    }

    /**
     * Sets paid_amount
     *
     * @param float $paid_amount Real money value (unit price * quantity) paid by the customer (The value for a pharmaceutical client could have a copayment for drug prescription or money value of drugs not covered by an insurer).
     *
     * @return $this
     */
    public function setPaidAmount($paid_amount)
    {
        $this->container['paid_amount'] = $paid_amount;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price Value of parameter \"paid_amount\". In the case of a pharmaceutical client, add to the value of \"paid_amount\" a value of money covered by the customer  health insurance.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets bill_item_id
     *
     * @return string
     */
    public function getBillItemId()
    {
        return $this->container['bill_item_id'];
    }

    /**
     * Sets bill_item_id
     *
     * @param string $bill_item_id ID of the bill item.
     *
     * @return $this
     */
    public function setBillItemId($bill_item_id)
    {
        $this->container['bill_item_id'] = $bill_item_id;

        return $this;
    }

    /**
     * Gets loyalty_off
     *
     * @return bool
     */
    public function getLoyaltyOff()
    {
        return $this->container['loyalty_off'];
    }

    /**
     * Sets loyalty_off
     *
     * @param bool $loyalty_off Switch off all loyalty benefits (points, discounts- instant and campaign prices, vouchers) on the item.
     *
     * @return $this
     */
    public function setLoyaltyOff($loyalty_off)
    {
        $this->container['loyalty_off'] = $loyalty_off;

        return $this;
    }

    /**
     * Gets purchase_item_type_id
     *
     * @return string
     */
    public function getPurchaseItemTypeId()
    {
        return $this->container['purchase_item_type_id'];
    }

    /**
     * Sets purchase_item_type_id
     *
     * @param string $purchase_item_type_id Type of the purchase item from resource [purchase-item-types](#tag/Purchase-item-types).
     *
     * @return $this
     */
    public function setPurchaseItemTypeId($purchase_item_type_id)
    {
        $this->container['purchase_item_type_id'] = $purchase_item_type_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The ID of the customer.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
