<?php
/**
 * InlineResponse200180Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.55
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * InlineResponse200180Data Class Doc Comment
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200180Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_180_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'earned_points' => 'float',
        'redeemed_points' => 'float',
        'available_points' => 'float',
        'available_points_money_value' => '\CrmCareCloud\Webservice\RestApi\Client\Model\MoneyValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'earned_points' => 'float',
        'redeemed_points' => 'float',
        'available_points' => 'float',
        'available_points_money_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'earned_points' => 'earned_points',
        'redeemed_points' => 'redeemed_points',
        'available_points' => 'available_points',
        'available_points_money_value' => 'available_points_money_value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'earned_points' => 'setEarnedPoints',
        'redeemed_points' => 'setRedeemedPoints',
        'available_points' => 'setAvailablePoints',
        'available_points_money_value' => 'setAvailablePointsMoneyValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'earned_points' => 'getEarnedPoints',
        'redeemed_points' => 'getRedeemedPoints',
        'available_points' => 'getAvailablePoints',
        'available_points_money_value' => 'getAvailablePointsMoneyValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['earned_points'] = isset($data['earned_points']) ? $data['earned_points'] : null;
        $this->container['redeemed_points'] = isset($data['redeemed_points']) ? $data['redeemed_points'] : null;
        $this->container['available_points'] = isset($data['available_points']) ? $data['available_points'] : null;
        $this->container['available_points_money_value'] = isset($data['available_points_money_value']) ? $data['available_points_money_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets earned_points
     *
     * @return float
     */
    public function getEarnedPoints()
    {
        return $this->container['earned_points'];
    }

    /**
     * Sets earned_points
     *
     * @param float $earned_points Amount of earned points in time interval.
     *
     * @return $this
     */
    public function setEarnedPoints($earned_points)
    {
        $this->container['earned_points'] = $earned_points;

        return $this;
    }

    /**
     * Gets redeemed_points
     *
     * @return float
     */
    public function getRedeemedPoints()
    {
        return $this->container['redeemed_points'];
    }

    /**
     * Sets redeemed_points
     *
     * @param float $redeemed_points Amount of redeemed points in time interval.
     *
     * @return $this
     */
    public function setRedeemedPoints($redeemed_points)
    {
        $this->container['redeemed_points'] = $redeemed_points;

        return $this;
    }

    /**
     * Gets available_points
     *
     * @return float
     */
    public function getAvailablePoints()
    {
        return $this->container['available_points'];
    }

    /**
     * Sets available_points
     *
     * @param float $available_points Amount of available points in the moment. Time interval has no influence to the result.
     *
     * @return $this
     */
    public function setAvailablePoints($available_points)
    {
        $this->container['available_points'] = $available_points;

        return $this;
    }

    /**
     * Gets available_points_money_value
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\MoneyValue[]
     */
    public function getAvailablePointsMoneyValue()
    {
        return $this->container['available_points_money_value'];
    }

    /**
     * Sets available_points_money_value
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\MoneyValue[] $available_points_money_value Parameter shows money representation of the 'available_points' parameter. CareCloud calculates money value for every system currency. The calculation is available only if the customer  status allows a point payment. This setup is possible in CareCloud administration.
     *
     * @return $this
     */
    public function setAvailablePointsMoneyValue($available_points_money_value)
    {
        $this->container['available_points_money_value'] = $available_points_money_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
