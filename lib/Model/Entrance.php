<?php
/**
 * Entrance
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * Entrance Class Doc Comment
 *
 * @category Class
 * @description Entrance structure.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Entrance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Entrance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'entrance_id' => 'string',
        'pos_id' => 'int',
        'name' => 'string',
        'customer_id' => 'string',
        'resort_name' => 'string',
        'customer_category_name' => 'string',
        'external_order_id' => 'string',
        'external_entrance_id' => 'string',
        'external_turnstile_permission_id' => 'string',
        'entrance_type_id' => 'int',
        'order_item_id' => 'string',
        'card_id' => 'string',
        'created_at' => 'string',
        'cancelled_at' => 'string',
        'charged_price' => 'float',
        'product_ids' => 'string',
        'charge_date' => 'string',
        'valid_from' => 'string',
        'valid_to' => 'string',
        'last_change' => 'string',
        'state' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'entrance_id' => null,
        'pos_id' => null,
        'name' => null,
        'customer_id' => null,
        'resort_name' => null,
        'customer_category_name' => null,
        'external_order_id' => null,
        'external_entrance_id' => null,
        'external_turnstile_permission_id' => null,
        'entrance_type_id' => null,
        'order_item_id' => null,
        'card_id' => null,
        'created_at' => null,
        'cancelled_at' => null,
        'charged_price' => 'float',
        'product_ids' => null,
        'charge_date' => null,
        'valid_from' => null,
        'valid_to' => null,
        'last_change' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entrance_id' => 'entrance_id',
        'pos_id' => 'pos_id',
        'name' => 'name',
        'customer_id' => 'customer_id',
        'resort_name' => 'resort_name',
        'customer_category_name' => 'customer_category_name',
        'external_order_id' => 'external_order_id',
        'external_entrance_id' => 'external_entrance_id',
        'external_turnstile_permission_id' => 'external_turnstile_permission_id',
        'entrance_type_id' => 'entrance_type_id',
        'order_item_id' => 'order_item_id',
        'card_id' => 'card_id',
        'created_at' => 'created_at',
        'cancelled_at' => 'cancelled_at',
        'charged_price' => 'charged_price',
        'product_ids' => 'product_ids',
        'charge_date' => 'charge_date',
        'valid_from' => 'valid_from',
        'valid_to' => 'valid_to',
        'last_change' => 'last_change',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entrance_id' => 'setEntranceId',
        'pos_id' => 'setPosId',
        'name' => 'setName',
        'customer_id' => 'setCustomerId',
        'resort_name' => 'setResortName',
        'customer_category_name' => 'setCustomerCategoryName',
        'external_order_id' => 'setExternalOrderId',
        'external_entrance_id' => 'setExternalEntranceId',
        'external_turnstile_permission_id' => 'setExternalTurnstilePermissionId',
        'entrance_type_id' => 'setEntranceTypeId',
        'order_item_id' => 'setOrderItemId',
        'card_id' => 'setCardId',
        'created_at' => 'setCreatedAt',
        'cancelled_at' => 'setCancelledAt',
        'charged_price' => 'setChargedPrice',
        'product_ids' => 'setProductIds',
        'charge_date' => 'setChargeDate',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'last_change' => 'setLastChange',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entrance_id' => 'getEntranceId',
        'pos_id' => 'getPosId',
        'name' => 'getName',
        'customer_id' => 'getCustomerId',
        'resort_name' => 'getResortName',
        'customer_category_name' => 'getCustomerCategoryName',
        'external_order_id' => 'getExternalOrderId',
        'external_entrance_id' => 'getExternalEntranceId',
        'external_turnstile_permission_id' => 'getExternalTurnstilePermissionId',
        'entrance_type_id' => 'getEntranceTypeId',
        'order_item_id' => 'getOrderItemId',
        'card_id' => 'getCardId',
        'created_at' => 'getCreatedAt',
        'cancelled_at' => 'getCancelledAt',
        'charged_price' => 'getChargedPrice',
        'product_ids' => 'getProductIds',
        'charge_date' => 'getChargeDate',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'last_change' => 'getLastChange',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const POS_ID_3 = 3;
const POS_ID_6 = 6;
const POS_ID_9 = 9;
const POS_ID_11 = 11;
const ENTRANCE_TYPE_ID_0 = 0;
const ENTRANCE_TYPE_ID_1 = 1;
const ENTRANCE_TYPE_ID_2 = 2;
const STATE_0 = 0;
const STATE_1 = 1;

    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getPosIdAllowableValues()
    {
        return [
            self::POS_ID_3,
self::POS_ID_6,
self::POS_ID_9,
self::POS_ID_11,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getEntranceTypeIdAllowableValues()
    {
        return [
            self::ENTRANCE_TYPE_ID_0,
self::ENTRANCE_TYPE_ID_1,
self::ENTRANCE_TYPE_ID_2,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_0,
self::STATE_1,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['entrance_id'] = isset($data['entrance_id']) ? $data['entrance_id'] : null;
        $this->container['pos_id'] = isset($data['pos_id']) ? $data['pos_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['resort_name'] = isset($data['resort_name']) ? $data['resort_name'] : null;
        $this->container['customer_category_name'] = isset($data['customer_category_name']) ? $data['customer_category_name'] : null;
        $this->container['external_order_id'] = isset($data['external_order_id']) ? $data['external_order_id'] : null;
        $this->container['external_entrance_id'] = isset($data['external_entrance_id']) ? $data['external_entrance_id'] : null;
        $this->container['external_turnstile_permission_id'] = isset($data['external_turnstile_permission_id']) ? $data['external_turnstile_permission_id'] : null;
        $this->container['entrance_type_id'] = isset($data['entrance_type_id']) ? $data['entrance_type_id'] : null;
        $this->container['order_item_id'] = isset($data['order_item_id']) ? $data['order_item_id'] : null;
        $this->container['card_id'] = isset($data['card_id']) ? $data['card_id'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['cancelled_at'] = isset($data['cancelled_at']) ? $data['cancelled_at'] : null;
        $this->container['charged_price'] = isset($data['charged_price']) ? $data['charged_price'] : null;
        $this->container['product_ids'] = isset($data['product_ids']) ? $data['product_ids'] : null;
        $this->container['charge_date'] = isset($data['charge_date']) ? $data['charge_date'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
        $this->container['last_change'] = isset($data['last_change']) ? $data['last_change'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entrance_id'] === null) {
            $invalidProperties[] = "'entrance_id' can't be null";
        }
        if ($this->container['pos_id'] === null) {
            $invalidProperties[] = "'pos_id' can't be null";
        }
        $allowedValues = $this->getPosIdAllowableValues();
        if (!is_null($this->container['pos_id']) && !in_array($this->container['pos_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pos_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEntranceTypeIdAllowableValues();
        if (!is_null($this->container['entrance_type_id']) && !in_array($this->container['entrance_type_id'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'entrance_type_id', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['card_id'] === null) {
            $invalidProperties[] = "'card_id' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entrance_id
     *
     * @return string
     */
    public function getEntranceId()
    {
        return $this->container['entrance_id'];
    }

    /**
     * Sets entrance_id
     *
     * @param string $entrance_id The unique ID of the entrance.
     *
     * @return $this
     */
    public function setEntranceId($entrance_id)
    {
        $this->container['entrance_id'] = $entrance_id;

        return $this;
    }

    /**
     * Gets pos_id
     *
     * @return int
     */
    public function getPosId()
    {
        return $this->container['pos_id'];
    }

    /**
     * Sets pos_id
     *
     * @param int $pos_id ID of POS system for tickets. Required with path parameter entrance ID. *Possible values are: EPOS - 3 / skidata - 6 / axess - 9 / base - 11*
     *
     * @return $this
     */
    public function setPosId($pos_id)
    {
        $allowedValues = $this->getPosIdAllowableValues();
        if (!in_array($pos_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pos_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pos_id'] = $pos_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the entrance.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The unique ID of the customer.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets resort_name
     *
     * @return string
     */
    public function getResortName()
    {
        return $this->container['resort_name'];
    }

    /**
     * Sets resort_name
     *
     * @param string $resort_name Name of the resort where is an entrance charged.
     *
     * @return $this
     */
    public function setResortName($resort_name)
    {
        $this->container['resort_name'] = $resort_name;

        return $this;
    }

    /**
     * Gets customer_category_name
     *
     * @return string
     */
    public function getCustomerCategoryName()
    {
        return $this->container['customer_category_name'];
    }

    /**
     * Sets customer_category_name
     *
     * @param string $customer_category_name Name of the customer category.
     *
     * @return $this
     */
    public function setCustomerCategoryName($customer_category_name)
    {
        $this->container['customer_category_name'] = $customer_category_name;

        return $this;
    }

    /**
     * Gets external_order_id
     *
     * @return string
     */
    public function getExternalOrderId()
    {
        return $this->container['external_order_id'];
    }

    /**
     * Sets external_order_id
     *
     * @param string $external_order_id ID of an external order creaded in POS system.
     *
     * @return $this
     */
    public function setExternalOrderId($external_order_id)
    {
        $this->container['external_order_id'] = $external_order_id;

        return $this;
    }

    /**
     * Gets external_entrance_id
     *
     * @return string
     */
    public function getExternalEntranceId()
    {
        return $this->container['external_entrance_id'];
    }

    /**
     * Sets external_entrance_id
     *
     * @param string $external_entrance_id External ID of the entrance. Structure can be different depends of the POS system, that created the entrance.
     *
     * @return $this
     */
    public function setExternalEntranceId($external_entrance_id)
    {
        $this->container['external_entrance_id'] = $external_entrance_id;

        return $this;
    }

    /**
     * Gets external_turnstile_permission_id
     *
     * @return string
     */
    public function getExternalTurnstilePermissionId()
    {
        return $this->container['external_turnstile_permission_id'];
    }

    /**
     * Sets external_turnstile_permission_id
     *
     * @param string $external_turnstile_permission_id External ID of the permission to open a turnstile. Structure can be different depends of the POS system, that created the permission.
     *
     * @return $this
     */
    public function setExternalTurnstilePermissionId($external_turnstile_permission_id)
    {
        $this->container['external_turnstile_permission_id'] = $external_turnstile_permission_id;

        return $this;
    }

    /**
     * Gets entrance_type_id
     *
     * @return int
     */
    public function getEntranceTypeId()
    {
        return $this->container['entrance_type_id'];
    }

    /**
     * Sets entrance_type_id
     *
     * @param int $entrance_type_id Type of the entrance *Possible values are: season ticket - 0/ one day ticket -1/ multiple day ticket - 2*
     *
     * @return $this
     */
    public function setEntranceTypeId($entrance_type_id)
    {
        $allowedValues = $this->getEntranceTypeIdAllowableValues();
        if (!is_null($entrance_type_id) && !in_array($entrance_type_id, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'entrance_type_id', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['entrance_type_id'] = $entrance_type_id;

        return $this;
    }

    /**
     * Gets order_item_id
     *
     * @return string
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param string $order_item_id Order ID item represents relation between entrance and order item from carecloud e-shop.
     *
     * @return $this
     */
    public function setOrderItemId($order_item_id)
    {
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets card_id
     *
     * @return string
     */
    public function getCardId()
    {
        return $this->container['card_id'];
    }

    /**
     * Sets card_id
     *
     * @param string $card_id ID of card used for charge entrance.
     *
     * @return $this
     */
    public function setCardId($card_id)
    {
        $this->container['card_id'] = $card_id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at Date and time when entrance was created in CareCloud. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets cancelled_at
     *
     * @return string
     */
    public function getCancelledAt()
    {
        return $this->container['cancelled_at'];
    }

    /**
     * Sets cancelled_at
     *
     * @param string $cancelled_at Date and time when entrance was cancelled in CareCloud. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setCancelledAt($cancelled_at)
    {
        $this->container['cancelled_at'] = $cancelled_at;

        return $this;
    }

    /**
     * Gets charged_price
     *
     * @return float
     */
    public function getChargedPrice()
    {
        return $this->container['charged_price'];
    }

    /**
     * Sets charged_price
     *
     * @param float $charged_price Price charged to POS system.
     *
     * @return $this
     */
    public function setChargedPrice($charged_price)
    {
        $this->container['charged_price'] = $charged_price;

        return $this;
    }

    /**
     * Gets product_ids
     *
     * @return string
     */
    public function getProductIds()
    {
        return $this->container['product_ids'];
    }

    /**
     * Sets product_ids
     *
     * @param string $product_ids The unique ID of the product.
     *
     * @return $this
     */
    public function setProductIds($product_ids)
    {
        $this->container['product_ids'] = $product_ids;

        return $this;
    }

    /**
     * Gets charge_date
     *
     * @return string
     */
    public function getChargeDate()
    {
        return $this->container['charge_date'];
    }

    /**
     * Sets charge_date
     *
     * @param string $charge_date Date and time when entrance will be/was charged to the POS system. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setChargeDate($charge_date)
    {
        $this->container['charge_date'] = $charge_date;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return string
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param string $valid_from Date of the first day when customer can use entrance. *(YYYY-MM-DD)*
     *
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return string
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param string $valid_to Date of the last day when customer can use entrance. *(YYYY-MM-DD)*
     *
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return string
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param string $last_change Date and time of the last change. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state State of the event type. *Possible values are: 0 - cancelled / 1- active*
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
