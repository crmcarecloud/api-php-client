<?php
/**
 * PaymentRecap
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * PaymentRecap Class Doc Comment
 *
 * @category Class
 * @description Alternative payment methods summary.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentRecap implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentRecap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'credit_points' => 'float',
'amount_for_credit' => 'float',
'vouchers' => '\CrmCareCloud\Webservice\RestApi\Client\Model\PaymentVoucher[]',
'recommended_discounts' => '\CrmCareCloud\Webservice\RestApi\Client\Model\DiscountItem[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'credit_points' => 'float',
'amount_for_credit' => 'float',
'vouchers' => null,
'recommended_discounts' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'credit_points' => 'credit_points',
'amount_for_credit' => 'amount_for_credit',
'vouchers' => 'vouchers',
'recommended_discounts' => 'recommended_discounts'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'credit_points' => 'setCreditPoints',
'amount_for_credit' => 'setAmountForCredit',
'vouchers' => 'setVouchers',
'recommended_discounts' => 'setRecommendedDiscounts'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'credit_points' => 'getCreditPoints',
'amount_for_credit' => 'getAmountForCredit',
'vouchers' => 'getVouchers',
'recommended_discounts' => 'getRecommendedDiscounts'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['credit_points'] = isset($data['credit_points']) ? $data['credit_points'] : null;
        $this->container['amount_for_credit'] = isset($data['amount_for_credit']) ? $data['amount_for_credit'] : null;
        $this->container['vouchers'] = isset($data['vouchers']) ? $data['vouchers'] : null;
        $this->container['recommended_discounts'] = isset($data['recommended_discounts']) ? $data['recommended_discounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets credit_points
     *
     * @return float
     */
    public function getCreditPoints()
    {
        return $this->container['credit_points'];
    }

    /**
     * Sets credit_points
     *
     * @param float $credit_points Amount of the points used for payment of the purchase.
     *
     * @return $this
     */
    public function setCreditPoints($credit_points)
    {
        $this->container['credit_points'] = $credit_points;

        return $this;
    }

    /**
     * Gets amount_for_credit
     *
     * @return float
     */
    public function getAmountForCredit()
    {
        return $this->container['amount_for_credit'];
    }

    /**
     * Sets amount_for_credit
     *
     * @param float $amount_for_credit Amount of the credits used for payment of the purchase.
     *
     * @return $this
     */
    public function setAmountForCredit($amount_for_credit)
    {
        $this->container['amount_for_credit'] = $amount_for_credit;

        return $this;
    }

    /**
     * Gets vouchers
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\PaymentVoucher[]
     */
    public function getVouchers()
    {
        return $this->container['vouchers'];
    }

    /**
     * Sets vouchers
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\PaymentVoucher[] $vouchers List of used vouchers/rewards for the payment of purchases.
     *
     * @return $this
     */
    public function setVouchers($vouchers)
    {
        $this->container['vouchers'] = $vouchers;

        return $this;
    }

    /**
     * Gets recommended_discounts
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\DiscountItem[]
     */
    public function getRecommendedDiscounts()
    {
        return $this->container['recommended_discounts'];
    }

    /**
     * Sets recommended_discounts
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\DiscountItem[] $recommended_discounts List of applied discounts where the service did not use the voucher/reward.
     *
     * @return $this
     */
    public function setRecommendedDiscounts($recommended_discounts)
    {
        $this->container['recommended_discounts'] = $recommended_discounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
