<?php
/**
 * InlineResponse200142Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * InlineResponse200142Data Class Doc Comment
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse200142Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_142_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'active_entrances' => 'int',
'canceled_entrances' => 'int',
'deactivated_entrances' => 'int',
'sold_entrances' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'active_entrances' => null,
'canceled_entrances' => null,
'deactivated_entrances' => null,
'sold_entrances' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active_entrances' => 'active_entrances',
'canceled_entrances' => 'canceled_entrances',
'deactivated_entrances' => 'deactivated_entrances',
'sold_entrances' => 'sold_entrances'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active_entrances' => 'setActiveEntrances',
'canceled_entrances' => 'setCanceledEntrances',
'deactivated_entrances' => 'setDeactivatedEntrances',
'sold_entrances' => 'setSoldEntrances'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active_entrances' => 'getActiveEntrances',
'canceled_entrances' => 'getCanceledEntrances',
'deactivated_entrances' => 'getDeactivatedEntrances',
'sold_entrances' => 'getSoldEntrances'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active_entrances'] = isset($data['active_entrances']) ? $data['active_entrances'] : null;
        $this->container['canceled_entrances'] = isset($data['canceled_entrances']) ? $data['canceled_entrances'] : null;
        $this->container['deactivated_entrances'] = isset($data['deactivated_entrances']) ? $data['deactivated_entrances'] : null;
        $this->container['sold_entrances'] = isset($data['sold_entrances']) ? $data['sold_entrances'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active_entrances
     *
     * @return int
     */
    public function getActiveEntrances()
    {
        return $this->container['active_entrances'];
    }

    /**
     * Sets active_entrances
     *
     * @param int $active_entrances Amount of active entrances in date range. Active entrances can be used by customers in their validity range.
     *
     * @return $this
     */
    public function setActiveEntrances($active_entrances)
    {
        $this->container['active_entrances'] = $active_entrances;

        return $this;
    }

    /**
     * Gets canceled_entrances
     *
     * @return int
     */
    public function getCanceledEntrances()
    {
        return $this->container['canceled_entrances'];
    }

    /**
     * Sets canceled_entrances
     *
     * @param int $canceled_entrances Amount of canceled entrances in date range. Canceled entrances in production systems and in CareCloud. Customers cannot use them anymore.
     *
     * @return $this
     */
    public function setCanceledEntrances($canceled_entrances)
    {
        $this->container['canceled_entrances'] = $canceled_entrances;

        return $this;
    }

    /**
     * Gets deactivated_entrances
     *
     * @return int
     */
    public function getDeactivatedEntrances()
    {
        return $this->container['deactivated_entrances'];
    }

    /**
     * Sets deactivated_entrances
     *
     * @param int $deactivated_entrances Amount of deactivated entrances in date range. Entrances deactivated in CareCloud only. These entrances are usually not sent to production systems. Deactivation have been done in system CareCloud.
     *
     * @return $this
     */
    public function setDeactivatedEntrances($deactivated_entrances)
    {
        $this->container['deactivated_entrances'] = $deactivated_entrances;

        return $this;
    }

    /**
     * Gets sold_entrances
     *
     * @return int
     */
    public function getSoldEntrances()
    {
        return $this->container['sold_entrances'];
    }

    /**
     * Sets sold_entrances
     *
     * @param int $sold_entrances Amount of sold entrances in date range. Entrances deactivated in CareCloud only. These entrances are usually not sent to production systems. Deactivation have been done in system CareCloud.
     *
     * @return $this
     */
    public function setSoldEntrances($sold_entrances)
    {
        $this->container['sold_entrances'] = $sold_entrances;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
