<?php
/**
 * GetWalletCredits200ResponseData
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.55
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * GetWalletCredits200ResponseData Class Doc Comment
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetWalletCredits200ResponseData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetWalletCredits200Response_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'earned_credits' => 'float',
        'redeemed_credits' => 'float',
        'available_credits' => 'float',
        'split_by_currency' => '\CrmCareCloud\Webservice\RestApi\Client\Model\CreditWalletSummary[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'earned_credits' => 'float',
        'redeemed_credits' => 'float',
        'available_credits' => 'float',
        'split_by_currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'earned_credits' => 'earned_credits',
        'redeemed_credits' => 'redeemed_credits',
        'available_credits' => 'available_credits',
        'split_by_currency' => 'split_by_currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'earned_credits' => 'setEarnedCredits',
        'redeemed_credits' => 'setRedeemedCredits',
        'available_credits' => 'setAvailableCredits',
        'split_by_currency' => 'setSplitByCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'earned_credits' => 'getEarnedCredits',
        'redeemed_credits' => 'getRedeemedCredits',
        'available_credits' => 'getAvailableCredits',
        'split_by_currency' => 'getSplitByCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['earned_credits'] = isset($data['earned_credits']) ? $data['earned_credits'] : null;
        $this->container['redeemed_credits'] = isset($data['redeemed_credits']) ? $data['redeemed_credits'] : null;
        $this->container['available_credits'] = isset($data['available_credits']) ? $data['available_credits'] : null;
        $this->container['split_by_currency'] = isset($data['split_by_currency']) ? $data['split_by_currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets earned_credits
     *
     * @return float
     */
    public function getEarnedCredits()
    {
        return $this->container['earned_credits'];
    }

    /**
     * Sets earned_credits
     *
     * @param float $earned_credits Amount of earned credits in time interval.
     *
     * @return $this
     */
    public function setEarnedCredits($earned_credits)
    {
        $this->container['earned_credits'] = $earned_credits;

        return $this;
    }

    /**
     * Gets redeemed_credits
     *
     * @return float
     */
    public function getRedeemedCredits()
    {
        return $this->container['redeemed_credits'];
    }

    /**
     * Sets redeemed_credits
     *
     * @param float $redeemed_credits Amount of redeemed credits in time interval.
     *
     * @return $this
     */
    public function setRedeemedCredits($redeemed_credits)
    {
        $this->container['redeemed_credits'] = $redeemed_credits;

        return $this;
    }

    /**
     * Gets available_credits
     *
     * @return float
     */
    public function getAvailableCredits()
    {
        return $this->container['available_credits'];
    }

    /**
     * Sets available_credits
     *
     * @param float $available_credits Amount of available credits in the moment. Time interval has no influence to the result.
     *
     * @return $this
     */
    public function setAvailableCredits($available_credits)
    {
        $this->container['available_credits'] = $available_credits;

        return $this;
    }

    /**
     * Gets split_by_currency
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\CreditWalletSummary[]
     */
    public function getSplitByCurrency()
    {
        return $this->container['split_by_currency'];
    }

    /**
     * Sets split_by_currency
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\CreditWalletSummary[] $split_by_currency The credit overview split by currency.
     *
     * @return $this
     */
    public function setSplitByCurrency($split_by_currency)
    {
        $this->container['split_by_currency'] = $split_by_currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
