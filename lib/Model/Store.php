<?php
/**
 * Store
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * Store Class Doc Comment
 *
 * @category Class
 * @description Store structure.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Store implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Store';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'store_id' => 'string',
        'store_code' => 'string',
        'name' => 'string',
        'store_address' => '\CrmCareCloud\Webservice\RestApi\Client\Model\Address',
        'contact_email' => 'string',
        'manager_name' => 'string',
        'phone_number' => 'string',
        'partner_id' => 'string',
        'system_id' => 'string',
        'gps_coordinates' => '\CrmCareCloud\Webservice\RestApi\Client\Model\GPSCoordinates',
        'url_address' => 'string',
        'opening' => '\CrmCareCloud\Webservice\RestApi\Client\Model\OpeningDay[]',
        'image_urls' => 'string[]',
        'visibility_for_customer' => 'int',
        'short_description' => 'string',
        'description' => 'string',
        'registration_id' => 'string',
        'last_change' => 'string',
        'state' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'store_id' => null,
        'store_code' => null,
        'name' => null,
        'store_address' => null,
        'contact_email' => null,
        'manager_name' => null,
        'phone_number' => null,
        'partner_id' => null,
        'system_id' => null,
        'gps_coordinates' => null,
        'url_address' => null,
        'opening' => null,
        'image_urls' => null,
        'visibility_for_customer' => null,
        'short_description' => null,
        'description' => null,
        'registration_id' => null,
        'last_change' => null,
        'state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store_id' => 'store_id',
        'store_code' => 'store_code',
        'name' => 'name',
        'store_address' => 'store_address',
        'contact_email' => 'contact_email',
        'manager_name' => 'manager_name',
        'phone_number' => 'phone_number',
        'partner_id' => 'partner_id',
        'system_id' => 'system_id',
        'gps_coordinates' => 'gps_coordinates',
        'url_address' => 'url_address',
        'opening' => 'opening',
        'image_urls' => 'image_urls',
        'visibility_for_customer' => 'visibility_for_customer',
        'short_description' => 'short_description',
        'description' => 'description',
        'registration_id' => 'registration_id',
        'last_change' => 'last_change',
        'state' => 'state'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store_id' => 'setStoreId',
        'store_code' => 'setStoreCode',
        'name' => 'setName',
        'store_address' => 'setStoreAddress',
        'contact_email' => 'setContactEmail',
        'manager_name' => 'setManagerName',
        'phone_number' => 'setPhoneNumber',
        'partner_id' => 'setPartnerId',
        'system_id' => 'setSystemId',
        'gps_coordinates' => 'setGpsCoordinates',
        'url_address' => 'setUrlAddress',
        'opening' => 'setOpening',
        'image_urls' => 'setImageUrls',
        'visibility_for_customer' => 'setVisibilityForCustomer',
        'short_description' => 'setShortDescription',
        'description' => 'setDescription',
        'registration_id' => 'setRegistrationId',
        'last_change' => 'setLastChange',
        'state' => 'setState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store_id' => 'getStoreId',
        'store_code' => 'getStoreCode',
        'name' => 'getName',
        'store_address' => 'getStoreAddress',
        'contact_email' => 'getContactEmail',
        'manager_name' => 'getManagerName',
        'phone_number' => 'getPhoneNumber',
        'partner_id' => 'getPartnerId',
        'system_id' => 'getSystemId',
        'gps_coordinates' => 'getGpsCoordinates',
        'url_address' => 'getUrlAddress',
        'opening' => 'getOpening',
        'image_urls' => 'getImageUrls',
        'visibility_for_customer' => 'getVisibilityForCustomer',
        'short_description' => 'getShortDescription',
        'description' => 'getDescription',
        'registration_id' => 'getRegistrationId',
        'last_change' => 'getLastChange',
        'state' => 'getState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const VISIBILITY_FOR_CUSTOMER_0 = 0;
const VISIBILITY_FOR_CUSTOMER_1 = 1;
const STATE_0 = 0;
const STATE_1 = 1;
const STATE_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getVisibilityForCustomerAllowableValues()
    {
        return [
            self::VISIBILITY_FOR_CUSTOMER_0,
self::VISIBILITY_FOR_CUSTOMER_1,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_0,
self::STATE_1,
self::STATE_2,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['store_code'] = isset($data['store_code']) ? $data['store_code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['store_address'] = isset($data['store_address']) ? $data['store_address'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['manager_name'] = isset($data['manager_name']) ? $data['manager_name'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['partner_id'] = isset($data['partner_id']) ? $data['partner_id'] : null;
        $this->container['system_id'] = isset($data['system_id']) ? $data['system_id'] : null;
        $this->container['gps_coordinates'] = isset($data['gps_coordinates']) ? $data['gps_coordinates'] : null;
        $this->container['url_address'] = isset($data['url_address']) ? $data['url_address'] : null;
        $this->container['opening'] = isset($data['opening']) ? $data['opening'] : null;
        $this->container['image_urls'] = isset($data['image_urls']) ? $data['image_urls'] : null;
        $this->container['visibility_for_customer'] = isset($data['visibility_for_customer']) ? $data['visibility_for_customer'] : null;
        $this->container['short_description'] = isset($data['short_description']) ? $data['short_description'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['registration_id'] = isset($data['registration_id']) ? $data['registration_id'] : null;
        $this->container['last_change'] = isset($data['last_change']) ? $data['last_change'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['store_id'] === null) {
            $invalidProperties[] = "'store_id' can't be null";
        }
        if ($this->container['store_code'] === null) {
            $invalidProperties[] = "'store_code' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['partner_id'] === null) {
            $invalidProperties[] = "'partner_id' can't be null";
        }
        if ($this->container['system_id'] === null) {
            $invalidProperties[] = "'system_id' can't be null";
        }
        $allowedValues = $this->getVisibilityForCustomerAllowableValues();
        if (!is_null($this->container['visibility_for_customer']) && !in_array($this->container['visibility_for_customer'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'visibility_for_customer', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store_id
     *
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string $store_id The unique ID of the store in CareCloud.
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets store_code
     *
     * @return string
     */
    public function getStoreCode()
    {
        return $this->container['store_code'];
    }

    /**
     * Sets store_code
     *
     * @param string $store_code External code of the store.
     *
     * @return $this
     */
    public function setStoreCode($store_code)
    {
        $this->container['store_code'] = $store_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the store.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets store_address
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\Address
     */
    public function getStoreAddress()
    {
        return $this->container['store_address'];
    }

    /**
     * Sets store_address
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\Address $store_address store_address
     *
     * @return $this
     */
    public function setStoreAddress($store_address)
    {
        $this->container['store_address'] = $store_address;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email Contact email of the store.
     *
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets manager_name
     *
     * @return string
     */
    public function getManagerName()
    {
        return $this->container['manager_name'];
    }

    /**
     * Sets manager_name
     *
     * @param string $manager_name Name of the store manager.
     *
     * @return $this
     */
    public function setManagerName($manager_name)
    {
        $this->container['manager_name'] = $manager_name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Phone number of the store with international prefix (420000000000).
     *
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets partner_id
     *
     * @return string
     */
    public function getPartnerId()
    {
        return $this->container['partner_id'];
    }

    /**
     * Sets partner_id
     *
     * @param string $partner_id The unique ID of the partner.
     *
     * @return $this
     */
    public function setPartnerId($partner_id)
    {
        $this->container['partner_id'] = $partner_id;

        return $this;
    }

    /**
     * Gets system_id
     *
     * @return string
     */
    public function getSystemId()
    {
        return $this->container['system_id'];
    }

    /**
     * Sets system_id
     *
     * @param string $system_id The external unique ID of the store in external system.
     *
     * @return $this
     */
    public function setSystemId($system_id)
    {
        $this->container['system_id'] = $system_id;

        return $this;
    }

    /**
     * Gets gps_coordinates
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\GPSCoordinates
     */
    public function getGpsCoordinates()
    {
        return $this->container['gps_coordinates'];
    }

    /**
     * Sets gps_coordinates
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\GPSCoordinates $gps_coordinates gps_coordinates
     *
     * @return $this
     */
    public function setGpsCoordinates($gps_coordinates)
    {
        $this->container['gps_coordinates'] = $gps_coordinates;

        return $this;
    }

    /**
     * Gets url_address
     *
     * @return string
     */
    public function getUrlAddress()
    {
        return $this->container['url_address'];
    }

    /**
     * Sets url_address
     *
     * @param string $url_address URL address of the store.
     *
     * @return $this
     */
    public function setUrlAddress($url_address)
    {
        $this->container['url_address'] = $url_address;

        return $this;
    }

    /**
     * Gets opening
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\OpeningDay[]
     */
    public function getOpening()
    {
        return $this->container['opening'];
    }

    /**
     * Sets opening
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\OpeningDay[] $opening List of opening days.
     *
     * @return $this
     */
    public function setOpening($opening)
    {
        $this->container['opening'] = $opening;

        return $this;
    }

    /**
     * Gets image_urls
     *
     * @return string[]
     */
    public function getImageUrls()
    {
        return $this->container['image_urls'];
    }

    /**
     * Sets image_urls
     *
     * @param string[] $image_urls A list of image URL addresses.
     *
     * @return $this
     */
    public function setImageUrls($image_urls)
    {
        $this->container['image_urls'] = $image_urls;

        return $this;
    }

    /**
     * Gets visibility_for_customer
     *
     * @return int
     */
    public function getVisibilityForCustomer()
    {
        return $this->container['visibility_for_customer'];
    }

    /**
     * Sets visibility_for_customer
     *
     * @param int $visibility_for_customer State of the visibility for the customer. *Possible values are: 0 - invisible / 1 - visible*
     *
     * @return $this
     */
    public function setVisibilityForCustomer($visibility_for_customer)
    {
        $allowedValues = $this->getVisibilityForCustomerAllowableValues();
        if (!is_null($visibility_for_customer) && !in_array($visibility_for_customer, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'visibility_for_customer', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visibility_for_customer'] = $visibility_for_customer;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string $short_description Short description of the store.
     *
     * @return $this
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Long description of the store.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets registration_id
     *
     * @return string
     */
    public function getRegistrationId()
    {
        return $this->container['registration_id'];
    }

    /**
     * Sets registration_id
     *
     * @param string $registration_id Legal registration number of the store.
     *
     * @return $this
     */
    public function setRegistrationId($registration_id)
    {
        $this->container['registration_id'] = $registration_id;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return string
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param string $last_change Date and time of the last change. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state State of the store *Possible values are: 0 - deleted / 1 - active / 2 - non active*
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
