<?php
/**
 * Status
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * Status Class Doc Comment
 *
 * @category Class
 * @description Status record.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Status implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Status';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'status_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'qualification_period' => 'int',
        'qualification_turnover' => '\CrmCareCloud\Webservice\RestApi\Client\Model\QualificationTurnover[]',
        'qualification_points' => 'float',
        'previous_status' => 'string',
        'next_status' => 'string',
        'validity_period' => 'string',
        'collection_points' => 'bool',
        'payment_points' => 'bool',
        'qualification_type' => 'int',
        'discount' => 'int',
        'overall_discount_on_discounted_purchase_items' => 'bool',
        'last_change' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'status_id' => null,
        'name' => null,
        'description' => null,
        'qualification_period' => null,
        'qualification_turnover' => null,
        'qualification_points' => 'float',
        'previous_status' => null,
        'next_status' => null,
        'validity_period' => null,
        'collection_points' => null,
        'payment_points' => null,
        'qualification_type' => null,
        'discount' => null,
        'overall_discount_on_discounted_purchase_items' => null,
        'last_change' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status_id' => 'status_id',
        'name' => 'name',
        'description' => 'description',
        'qualification_period' => 'qualification_period',
        'qualification_turnover' => 'qualification_turnover',
        'qualification_points' => 'qualification_points',
        'previous_status' => 'previous_status',
        'next_status' => 'next_status',
        'validity_period' => 'validity_period',
        'collection_points' => 'collection_points',
        'payment_points' => 'payment_points',
        'qualification_type' => 'qualification_type',
        'discount' => 'discount',
        'overall_discount_on_discounted_purchase_items' => 'overall_discount_on_discounted_purchase_items',
        'last_change' => 'last_change'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status_id' => 'setStatusId',
        'name' => 'setName',
        'description' => 'setDescription',
        'qualification_period' => 'setQualificationPeriod',
        'qualification_turnover' => 'setQualificationTurnover',
        'qualification_points' => 'setQualificationPoints',
        'previous_status' => 'setPreviousStatus',
        'next_status' => 'setNextStatus',
        'validity_period' => 'setValidityPeriod',
        'collection_points' => 'setCollectionPoints',
        'payment_points' => 'setPaymentPoints',
        'qualification_type' => 'setQualificationType',
        'discount' => 'setDiscount',
        'overall_discount_on_discounted_purchase_items' => 'setOverallDiscountOnDiscountedPurchaseItems',
        'last_change' => 'setLastChange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status_id' => 'getStatusId',
        'name' => 'getName',
        'description' => 'getDescription',
        'qualification_period' => 'getQualificationPeriod',
        'qualification_turnover' => 'getQualificationTurnover',
        'qualification_points' => 'getQualificationPoints',
        'previous_status' => 'getPreviousStatus',
        'next_status' => 'getNextStatus',
        'validity_period' => 'getValidityPeriod',
        'collection_points' => 'getCollectionPoints',
        'payment_points' => 'getPaymentPoints',
        'qualification_type' => 'getQualificationType',
        'discount' => 'getDiscount',
        'overall_discount_on_discounted_purchase_items' => 'getOverallDiscountOnDiscountedPurchaseItems',
        'last_change' => 'getLastChange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['qualification_period'] = isset($data['qualification_period']) ? $data['qualification_period'] : null;
        $this->container['qualification_turnover'] = isset($data['qualification_turnover']) ? $data['qualification_turnover'] : null;
        $this->container['qualification_points'] = isset($data['qualification_points']) ? $data['qualification_points'] : null;
        $this->container['previous_status'] = isset($data['previous_status']) ? $data['previous_status'] : null;
        $this->container['next_status'] = isset($data['next_status']) ? $data['next_status'] : null;
        $this->container['validity_period'] = isset($data['validity_period']) ? $data['validity_period'] : null;
        $this->container['collection_points'] = isset($data['collection_points']) ? $data['collection_points'] : null;
        $this->container['payment_points'] = isset($data['payment_points']) ? $data['payment_points'] : null;
        $this->container['qualification_type'] = isset($data['qualification_type']) ? $data['qualification_type'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['overall_discount_on_discounted_purchase_items'] = isset($data['overall_discount_on_discounted_purchase_items']) ? $data['overall_discount_on_discounted_purchase_items'] : null;
        $this->container['last_change'] = isset($data['last_change']) ? $data['last_change'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['validity_period'] === null) {
            $invalidProperties[] = "'validity_period' can't be null";
        }
        if ($this->container['collection_points'] === null) {
            $invalidProperties[] = "'collection_points' can't be null";
        }
        if ($this->container['payment_points'] === null) {
            $invalidProperties[] = "'payment_points' can't be null";
        }
        if ($this->container['qualification_type'] === null) {
            $invalidProperties[] = "'qualification_type' can't be null";
        }
        if ($this->container['discount'] === null) {
            $invalidProperties[] = "'discount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status_id
     *
     * @return string
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     *
     * @param string $status_id The unique ID of the status.
     *
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the status.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Short description of the status.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets qualification_period
     *
     * @return int
     */
    public function getQualificationPeriod()
    {
        return $this->container['qualification_period'];
    }

    /**
     * Sets qualification_period
     *
     * @param int $qualification_period The period of time (in months) in which it is necessary to qualify for the status based on defined conditions.
     *
     * @return $this
     */
    public function setQualificationPeriod($qualification_period)
    {
        $this->container['qualification_period'] = $qualification_period;

        return $this;
    }

    /**
     * Gets qualification_turnover
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\QualificationTurnover[]
     */
    public function getQualificationTurnover()
    {
        return $this->container['qualification_turnover'];
    }

    /**
     * Sets qualification_turnover
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\QualificationTurnover[] $qualification_turnover The turnover necessary to qualify for the status based on defined conditions.
     *
     * @return $this
     */
    public function setQualificationTurnover($qualification_turnover)
    {
        $this->container['qualification_turnover'] = $qualification_turnover;

        return $this;
    }

    /**
     * Gets qualification_points
     *
     * @return float
     */
    public function getQualificationPoints()
    {
        return $this->container['qualification_points'];
    }

    /**
     * Sets qualification_points
     *
     * @param float $qualification_points Amount of points necessary to qualify for the status based on defined conditions.
     *
     * @return $this
     */
    public function setQualificationPoints($qualification_points)
    {
        $this->container['qualification_points'] = $qualification_points;

        return $this;
    }

    /**
     * Gets previous_status
     *
     * @return string
     */
    public function getPreviousStatus()
    {
        return $this->container['previous_status'];
    }

    /**
     * Sets previous_status
     *
     * @param string $previous_status The previous status required to qualify for the next status based on defined conditions. The conditions are defined in parameters qualification_period and qualification_turnover.
     *
     * @return $this
     */
    public function setPreviousStatus($previous_status)
    {
        $this->container['previous_status'] = $previous_status;

        return $this;
    }

    /**
     * Gets next_status
     *
     * @return string
     */
    public function getNextStatus()
    {
        return $this->container['next_status'];
    }

    /**
     * Sets next_status
     *
     * @param string $next_status ID of the following status.
     *
     * @return $this
     */
    public function setNextStatus($next_status)
    {
        $this->container['next_status'] = $next_status;

        return $this;
    }

    /**
     * Gets validity_period
     *
     * @return string
     */
    public function getValidityPeriod()
    {
        return $this->container['validity_period'];
    }

    /**
     * Sets validity_period
     *
     * @param string $validity_period Definition of the status validity period.
     *
     * @return $this
     */
    public function setValidityPeriod($validity_period)
    {
        $this->container['validity_period'] = $validity_period;

        return $this;
    }

    /**
     * Gets collection_points
     *
     * @return bool
     */
    public function getCollectionPoints()
    {
        return $this->container['collection_points'];
    }

    /**
     * Sets collection_points
     *
     * @param bool $collection_points Enable / disable points collection.
     *
     * @return $this
     */
    public function setCollectionPoints($collection_points)
    {
        $this->container['collection_points'] = $collection_points;

        return $this;
    }

    /**
     * Gets payment_points
     *
     * @return bool
     */
    public function getPaymentPoints()
    {
        return $this->container['payment_points'];
    }

    /**
     * Sets payment_points
     *
     * @param bool $payment_points Enable / disable payment by points.
     *
     * @return $this
     */
    public function setPaymentPoints($payment_points)
    {
        $this->container['payment_points'] = $payment_points;

        return $this;
    }

    /**
     * Gets qualification_type
     *
     * @return int
     */
    public function getQualificationType()
    {
        return $this->container['qualification_type'];
    }

    /**
     * Sets qualification_type
     *
     * @param int $qualification_type The status achieving principle. *(0 - after creation of the account / 1 - manually / 2 - after the defined conditions are met)*
     *
     * @return $this
     */
    public function setQualificationType($qualification_type)
    {
        $this->container['qualification_type'] = $qualification_type;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return int
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param int $discount The basic loyalty discount.
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets overall_discount_on_discounted_purchase_items
     *
     * @return bool
     */
    public function getOverallDiscountOnDiscountedPurchaseItems()
    {
        return $this->container['overall_discount_on_discounted_purchase_items'];
    }

    /**
     * Sets overall_discount_on_discounted_purchase_items
     *
     * @param bool $overall_discount_on_discounted_purchase_items If true, overall discounts can be applied on already discounted purchase items in purchase checkout process.
     *
     * @return $this
     */
    public function setOverallDiscountOnDiscountedPurchaseItems($overall_discount_on_discounted_purchase_items)
    {
        $this->container['overall_discount_on_discounted_purchase_items'] = $overall_discount_on_discounted_purchase_items;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return string
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param string $last_change Date and time of the last change. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
