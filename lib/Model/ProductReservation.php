<?php
/**
 * ProductReservation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * ProductReservation Class Doc Comment
 *
 * @category Class
 * @description Product reservation resource.  &lt;p class&#x3D;\&quot;warning\&quot;&gt;⚠️Structure has to contain reservation codes or product reservation items&lt;/p&gt;
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductReservation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductReservation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'product_reservation_id' => 'string',
'customer_id' => 'string',
'store_id' => 'string',
'reservation_codes' => 'string[]',
'external_reservation_codes' => '\CrmCareCloud\Webservice\RestApi\Client\Model\ExternalCode[]',
'benefit_codes' => 'string[]',
'product_reservation_source_id' => 'string',
'pickup_date' => 'string',
'customers_note' => 'string',
'total_price' => 'float',
'currency_id' => 'string',
'product_reservation_items' => '\CrmCareCloud\Webservice\RestApi\Client\Model\ProductReservationItem[]',
'external_purchase_id' => 'string',
'utm' => '\CrmCareCloud\Webservice\RestApi\Client\Model\UTM',
'actual_state' => 'int',
'reservation_progress_history' => '\CrmCareCloud\Webservice\RestApi\Client\Model\ProductReservationProgress[]',
'comments' => '\CrmCareCloud\Webservice\RestApi\Client\Model\ProductReservationComment[]',
'last_change' => 'string',
'state' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'product_reservation_id' => null,
'customer_id' => null,
'store_id' => null,
'reservation_codes' => null,
'external_reservation_codes' => null,
'benefit_codes' => null,
'product_reservation_source_id' => null,
'pickup_date' => null,
'customers_note' => null,
'total_price' => 'float',
'currency_id' => null,
'product_reservation_items' => null,
'external_purchase_id' => null,
'utm' => null,
'actual_state' => null,
'reservation_progress_history' => null,
'comments' => null,
'last_change' => null,
'state' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_reservation_id' => 'product_reservation_id',
'customer_id' => 'customer_id',
'store_id' => 'store_id',
'reservation_codes' => 'reservation_codes',
'external_reservation_codes' => 'external_reservation_codes',
'benefit_codes' => 'benefit_codes',
'product_reservation_source_id' => 'product_reservation_source_id',
'pickup_date' => 'pickup_date',
'customers_note' => 'customers_note',
'total_price' => 'total_price',
'currency_id' => 'currency_id',
'product_reservation_items' => 'product_reservation_items',
'external_purchase_id' => 'external_purchase_id',
'utm' => 'utm',
'actual_state' => 'actual_state',
'reservation_progress_history' => 'reservation_progress_history',
'comments' => 'comments',
'last_change' => 'last_change',
'state' => 'state'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_reservation_id' => 'setProductReservationId',
'customer_id' => 'setCustomerId',
'store_id' => 'setStoreId',
'reservation_codes' => 'setReservationCodes',
'external_reservation_codes' => 'setExternalReservationCodes',
'benefit_codes' => 'setBenefitCodes',
'product_reservation_source_id' => 'setProductReservationSourceId',
'pickup_date' => 'setPickupDate',
'customers_note' => 'setCustomersNote',
'total_price' => 'setTotalPrice',
'currency_id' => 'setCurrencyId',
'product_reservation_items' => 'setProductReservationItems',
'external_purchase_id' => 'setExternalPurchaseId',
'utm' => 'setUtm',
'actual_state' => 'setActualState',
'reservation_progress_history' => 'setReservationProgressHistory',
'comments' => 'setComments',
'last_change' => 'setLastChange',
'state' => 'setState'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_reservation_id' => 'getProductReservationId',
'customer_id' => 'getCustomerId',
'store_id' => 'getStoreId',
'reservation_codes' => 'getReservationCodes',
'external_reservation_codes' => 'getExternalReservationCodes',
'benefit_codes' => 'getBenefitCodes',
'product_reservation_source_id' => 'getProductReservationSourceId',
'pickup_date' => 'getPickupDate',
'customers_note' => 'getCustomersNote',
'total_price' => 'getTotalPrice',
'currency_id' => 'getCurrencyId',
'product_reservation_items' => 'getProductReservationItems',
'external_purchase_id' => 'getExternalPurchaseId',
'utm' => 'getUtm',
'actual_state' => 'getActualState',
'reservation_progress_history' => 'getReservationProgressHistory',
'comments' => 'getComments',
'last_change' => 'getLastChange',
'state' => 'getState'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTUAL_STATE_0 = 0;
const ACTUAL_STATE_1 = 1;
const ACTUAL_STATE_2 = 2;
const ACTUAL_STATE_2_3 = 2;
const ACTUAL_STATE_4 = 4;
const ACTUAL_STATE_5 = 5;
const ACTUAL_STATE_6 = 6;
const ACTUAL_STATE_7 = 7;
const ACTUAL_STATE_8 = 8;
const STATE_0 = 0;
const STATE_1 = 1;
const STATE_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getActualStateAllowableValues()
    {
        return [
            self::ACTUAL_STATE_0,
self::ACTUAL_STATE_1,
self::ACTUAL_STATE_2,
self::ACTUAL_STATE_2_3,
self::ACTUAL_STATE_4,
self::ACTUAL_STATE_5,
self::ACTUAL_STATE_6,
self::ACTUAL_STATE_7,
self::ACTUAL_STATE_8,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_0,
self::STATE_1,
self::STATE_2,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_reservation_id'] = isset($data['product_reservation_id']) ? $data['product_reservation_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['store_id'] = isset($data['store_id']) ? $data['store_id'] : null;
        $this->container['reservation_codes'] = isset($data['reservation_codes']) ? $data['reservation_codes'] : null;
        $this->container['external_reservation_codes'] = isset($data['external_reservation_codes']) ? $data['external_reservation_codes'] : null;
        $this->container['benefit_codes'] = isset($data['benefit_codes']) ? $data['benefit_codes'] : null;
        $this->container['product_reservation_source_id'] = isset($data['product_reservation_source_id']) ? $data['product_reservation_source_id'] : null;
        $this->container['pickup_date'] = isset($data['pickup_date']) ? $data['pickup_date'] : null;
        $this->container['customers_note'] = isset($data['customers_note']) ? $data['customers_note'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['product_reservation_items'] = isset($data['product_reservation_items']) ? $data['product_reservation_items'] : null;
        $this->container['external_purchase_id'] = isset($data['external_purchase_id']) ? $data['external_purchase_id'] : null;
        $this->container['utm'] = isset($data['utm']) ? $data['utm'] : null;
        $this->container['actual_state'] = isset($data['actual_state']) ? $data['actual_state'] : null;
        $this->container['reservation_progress_history'] = isset($data['reservation_progress_history']) ? $data['reservation_progress_history'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['last_change'] = isset($data['last_change']) ? $data['last_change'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ($this->container['store_id'] === null) {
            $invalidProperties[] = "'store_id' can't be null";
        }
        if ($this->container['product_reservation_source_id'] === null) {
            $invalidProperties[] = "'product_reservation_source_id' can't be null";
        }
        $allowedValues = $this->getActualStateAllowableValues();
        if (!is_null($this->container['actual_state']) && !in_array($this->container['actual_state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'actual_state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_reservation_id
     *
     * @return string
     */
    public function getProductReservationId()
    {
        return $this->container['product_reservation_id'];
    }

    /**
     * Sets product_reservation_id
     *
     * @param string $product_reservation_id The unique ID of the product reservation.
     *
     * @return $this
     */
    public function setProductReservationId($product_reservation_id)
    {
        $this->container['product_reservation_id'] = $product_reservation_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The unique ID of the customer, owner of the product reservation.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string $store_id The unique ID of the store tied to the reservation.
     *
     * @return $this
     */
    public function setStoreId($store_id)
    {
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets reservation_codes
     *
     * @return string[]
     */
    public function getReservationCodes()
    {
        return $this->container['reservation_codes'];
    }

    /**
     * Sets reservation_codes
     *
     * @param string[] $reservation_codes Reservation codes of the reservation from CareCloud.
     *
     * @return $this
     */
    public function setReservationCodes($reservation_codes)
    {
        $this->container['reservation_codes'] = $reservation_codes;

        return $this;
    }

    /**
     * Gets external_reservation_codes
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\ExternalCode[]
     */
    public function getExternalReservationCodes()
    {
        return $this->container['external_reservation_codes'];
    }

    /**
     * Sets external_reservation_codes
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\ExternalCode[] $external_reservation_codes List of the external reservation codes. Id codes can have different sources. Please get in touch with your account manager for the list of ID sources.
     *
     * @return $this
     */
    public function setExternalReservationCodes($external_reservation_codes)
    {
        $this->container['external_reservation_codes'] = $external_reservation_codes;

        return $this;
    }

    /**
     * Gets benefit_codes
     *
     * @return string[]
     */
    public function getBenefitCodes()
    {
        return $this->container['benefit_codes'];
    }

    /**
     * Sets benefit_codes
     *
     * @param string[] $benefit_codes List of the benefit (rewards, vouchers) codes used in a reservation. After the reservation is delivered, all benefits are applied on the customer account.
     *
     * @return $this
     */
    public function setBenefitCodes($benefit_codes)
    {
        $this->container['benefit_codes'] = $benefit_codes;

        return $this;
    }

    /**
     * Gets product_reservation_source_id
     *
     * @return string
     */
    public function getProductReservationSourceId()
    {
        return $this->container['product_reservation_source_id'];
    }

    /**
     * Sets product_reservation_source_id
     *
     * @param string $product_reservation_source_id The unique ID of the product reservation source.
     *
     * @return $this
     */
    public function setProductReservationSourceId($product_reservation_source_id)
    {
        $this->container['product_reservation_source_id'] = $product_reservation_source_id;

        return $this;
    }

    /**
     * Gets pickup_date
     *
     * @return string
     */
    public function getPickupDate()
    {
        return $this->container['pickup_date'];
    }

    /**
     * Sets pickup_date
     *
     * @param string $pickup_date Date of the reservation pickup in the tied store. *(YYYY-MM-DD)*
     *
     * @return $this
     */
    public function setPickupDate($pickup_date)
    {
        $this->container['pickup_date'] = $pickup_date;

        return $this;
    }

    /**
     * Gets customers_note
     *
     * @return string
     */
    public function getCustomersNote()
    {
        return $this->container['customers_note'];
    }

    /**
     * Sets customers_note
     *
     * @param string $customers_note Customer’s note for the merchant.
     *
     * @return $this
     */
    public function setCustomersNote($customers_note)
    {
        $this->container['customers_note'] = $customers_note;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return float
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param float $total_price Total price of reservation. If currency_id is set, then total_price is mandatory.
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id ID of the currency. If total_price is set, then currency_id is mandatory.
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets product_reservation_items
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\ProductReservationItem[]
     */
    public function getProductReservationItems()
    {
        return $this->container['product_reservation_items'];
    }

    /**
     * Sets product_reservation_items
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\ProductReservationItem[] $product_reservation_items List of the Product Reservation Items.
     *
     * @return $this
     */
    public function setProductReservationItems($product_reservation_items)
    {
        $this->container['product_reservation_items'] = $product_reservation_items;

        return $this;
    }

    /**
     * Gets external_purchase_id
     *
     * @return string
     */
    public function getExternalPurchaseId()
    {
        return $this->container['external_purchase_id'];
    }

    /**
     * Sets external_purchase_id
     *
     * @param string $external_purchase_id The unique external ID of the purchase.
     *
     * @return $this
     */
    public function setExternalPurchaseId($external_purchase_id)
    {
        $this->container['external_purchase_id'] = $external_purchase_id;

        return $this;
    }

    /**
     * Gets utm
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\UTM
     */
    public function getUtm()
    {
        return $this->container['utm'];
    }

    /**
     * Sets utm
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\UTM $utm utm
     *
     * @return $this
     */
    public function setUtm($utm)
    {
        $this->container['utm'] = $utm;

        return $this;
    }

    /**
     * Gets actual_state
     *
     * @return int
     */
    public function getActualState()
    {
        return $this->container['actual_state'];
    }

    /**
     * Sets actual_state
     *
     * @param int $actual_state Current progress of the product reservation. *Possible values: 0 - Canceled / 1 - Entered / 2 - Accepted / 3 - Ready / 4 - Delivered / 5 - In progress / 6 - Not Picked up / 7 - Ordered / 8 - Being solved /_*
     *
     * @return $this
     */
    public function setActualState($actual_state)
    {
        $allowedValues = $this->getActualStateAllowableValues();
        if (!is_null($actual_state) && !in_array($actual_state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'actual_state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['actual_state'] = $actual_state;

        return $this;
    }

    /**
     * Gets reservation_progress_history
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\ProductReservationProgress[]
     */
    public function getReservationProgressHistory()
    {
        return $this->container['reservation_progress_history'];
    }

    /**
     * Sets reservation_progress_history
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\ProductReservationProgress[] $reservation_progress_history History of the product reservation progress. Product reservation progress is sorted in descending order by time.
     *
     * @return $this
     */
    public function setReservationProgressHistory($reservation_progress_history)
    {
        $this->container['reservation_progress_history'] = $reservation_progress_history;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\ProductReservationComment[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\ProductReservationComment[] $comments Product reservation comments. Comments are sorted in descending order by time.
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return string
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param string $last_change Date and time of the last change. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state State of the product reservation. *Possible values are: 0 - deleted / 1 - active *
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
