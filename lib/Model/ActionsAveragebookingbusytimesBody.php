<?php
/**
 * ActionsAveragebookingbusytimesBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.55
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * ActionsAveragebookingbusytimesBody Class Doc Comment
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ActionsAveragebookingbusytimesBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'actions_averagebookingbusytimes_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'booking_date' => 'string',
        'time_period' => 'string',
        'booking_ticket_id' => 'string',
        'booking_property_id' => 'string',
        'booking_property_value' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'booking_date' => null,
        'time_period' => null,
        'booking_ticket_id' => null,
        'booking_property_id' => null,
        'booking_property_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'booking_date' => 'booking_date',
        'time_period' => 'time_period',
        'booking_ticket_id' => 'booking_ticket_id',
        'booking_property_id' => 'booking_property_id',
        'booking_property_value' => 'booking_property_value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'booking_date' => 'setBookingDate',
        'time_period' => 'setTimePeriod',
        'booking_ticket_id' => 'setBookingTicketId',
        'booking_property_id' => 'setBookingPropertyId',
        'booking_property_value' => 'setBookingPropertyValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'booking_date' => 'getBookingDate',
        'time_period' => 'getTimePeriod',
        'booking_ticket_id' => 'getBookingTicketId',
        'booking_property_id' => 'getBookingPropertyId',
        'booking_property_value' => 'getBookingPropertyValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TIME_PERIOD_DAY = 'day';
const TIME_PERIOD_WEEK = 'week';
const TIME_PERIOD_MONTH = 'month';
const TIME_PERIOD_YEAR = 'year';

    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getTimePeriodAllowableValues()
    {
        return [
            self::TIME_PERIOD_DAY,
self::TIME_PERIOD_WEEK,
self::TIME_PERIOD_MONTH,
self::TIME_PERIOD_YEAR,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['booking_date'] = isset($data['booking_date']) ? $data['booking_date'] : null;
        $this->container['time_period'] = isset($data['time_period']) ? $data['time_period'] : null;
        $this->container['booking_ticket_id'] = isset($data['booking_ticket_id']) ? $data['booking_ticket_id'] : null;
        $this->container['booking_property_id'] = isset($data['booking_property_id']) ? $data['booking_property_id'] : null;
        $this->container['booking_property_value'] = isset($data['booking_property_value']) ? $data['booking_property_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['booking_date'] === null) {
            $invalidProperties[] = "'booking_date' can't be null";
        }
        if ($this->container['time_period'] === null) {
            $invalidProperties[] = "'time_period' can't be null";
        }
        $allowedValues = $this->getTimePeriodAllowableValues();
        if (!is_null($this->container['time_period']) && !in_array($this->container['time_period'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'time_period', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets booking_date
     *
     * @return string
     */
    public function getBookingDate()
    {
        return $this->container['booking_date'];
    }

    /**
     * Sets booking_date
     *
     * @param string $booking_date The date when you want to check how busy the bookings are
     *
     * @return $this
     */
    public function setBookingDate($booking_date)
    {
        $this->container['booking_date'] = $booking_date;

        return $this;
    }

    /**
     * Gets time_period
     *
     * @return string
     */
    public function getTimePeriod()
    {
        return $this->container['time_period'];
    }

    /**
     * Sets time_period
     *
     * @param string $time_period The period that the algorithm uses to calculate past busy times and return your data in that period. If you set the value as DAY, the algorithm will return the data for one day in an hour range.
     *
     * @return $this
     */
    public function setTimePeriod($time_period)
    {
        $allowedValues = $this->getTimePeriodAllowableValues();
        if (!in_array($time_period, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'time_period', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['time_period'] = $time_period;

        return $this;
    }

    /**
     * Gets booking_ticket_id
     *
     * @return string
     */
    public function getBookingTicketId()
    {
        return $this->container['booking_ticket_id'];
    }

    /**
     * Sets booking_ticket_id
     *
     * @param string $booking_ticket_id The unique ID of the booking ticket. If not set, the data will be returned for all available tickets.
     *
     * @return $this
     */
    public function setBookingTicketId($booking_ticket_id)
    {
        $this->container['booking_ticket_id'] = $booking_ticket_id;

        return $this;
    }

    /**
     * Gets booking_property_id
     *
     * @return string
     */
    public function getBookingPropertyId()
    {
        return $this->container['booking_property_id'];
    }

    /**
     * Sets booking_property_id
     *
     * @param string $booking_property_id Booking ticket property ID from resource [booking-ticket-properties](https://carecloud.readme.io/reference/getbookingticketproperties). The parameter determines property, which is used to filter resources by their properties. The parameter must be used in combination with property_value otherwise is ignored in the request.
     *
     * @return $this
     */
    public function setBookingPropertyId($booking_property_id)
    {
        $this->container['booking_property_id'] = $booking_property_id;

        return $this;
    }

    /**
     * Gets booking_property_value
     *
     * @return string
     */
    public function getBookingPropertyValue()
    {
        return $this->container['booking_property_value'];
    }

    /**
     * Sets booking_property_value
     *
     * @param string $booking_property_value Booking ticket property record value from [booking-ticket-properties](https://carecloud.readme.io/reference/getbookingticketproperties) in case of datatype with multiple values. Parameter filters resources depends of store property record value. The parameter must be used in combination with property_id otherwise is ignored in the request.
     *
     * @return $this
     */
    public function setBookingPropertyValue($booking_property_value)
    {
        $this->container['booking_property_value'] = $booking_property_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
