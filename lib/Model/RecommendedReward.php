<?php
/**
 * RecommendedReward
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * RecommendedReward Class Doc Comment
 *
 * @category Class
 * @description Recommended reward structure.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecommendedReward implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RecommendedReward';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'code' => 'string',
'name' => 'string',
'reward_priority' => 'int',
'max_count' => 'int',
'description' => 'string',
'reward_properties' => '\CrmCareCloud\Webservice\RestApi\Client\Model\RewardProperties'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'code' => null,
'name' => null,
'reward_priority' => null,
'max_count' => null,
'description' => null,
'reward_properties' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
'name' => 'name',
'reward_priority' => 'reward_priority',
'max_count' => 'max_count',
'description' => 'description',
'reward_properties' => 'reward_properties'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
'name' => 'setName',
'reward_priority' => 'setRewardPriority',
'max_count' => 'setMaxCount',
'description' => 'setDescription',
'reward_properties' => 'setRewardProperties'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
'name' => 'getName',
'reward_priority' => 'getRewardPriority',
'max_count' => 'getMaxCount',
'description' => 'getDescription',
'reward_properties' => 'getRewardProperties'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REWARD_PRIORITY_1 = 1;
const REWARD_PRIORITY_2 = 2;
const REWARD_PRIORITY_3 = 3;
const REWARD_PRIORITY_4 = 4;
const REWARD_PRIORITY_5 = 5;
const REWARD_PRIORITY_6 = 6;
const REWARD_PRIORITY_7 = 7;
const REWARD_PRIORITY_8 = 8;
const REWARD_PRIORITY_9 = 9;

    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getRewardPriorityAllowableValues()
    {
        return [
            self::REWARD_PRIORITY_1,
self::REWARD_PRIORITY_2,
self::REWARD_PRIORITY_3,
self::REWARD_PRIORITY_4,
self::REWARD_PRIORITY_5,
self::REWARD_PRIORITY_6,
self::REWARD_PRIORITY_7,
self::REWARD_PRIORITY_8,
self::REWARD_PRIORITY_9,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['reward_priority'] = isset($data['reward_priority']) ? $data['reward_priority'] : null;
        $this->container['max_count'] = isset($data['max_count']) ? $data['max_count'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['reward_properties'] = isset($data['reward_properties']) ? $data['reward_properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRewardPriorityAllowableValues();
        if (!is_null($this->container['reward_priority']) && !in_array($this->container['reward_priority'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reward_priority', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code Code of the reward.
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the reward.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets reward_priority
     *
     * @return int
     */
    public function getRewardPriority()
    {
        return $this->container['reward_priority'];
    }

    /**
     * Sets reward_priority
     *
     * @param int $reward_priority Priority of the reward. *1 - highest, 9 - lowest*
     *
     * @return $this
     */
    public function setRewardPriority($reward_priority)
    {
        $allowedValues = $this->getRewardPriorityAllowableValues();
        if (!is_null($reward_priority) && !in_array($reward_priority, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reward_priority', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reward_priority'] = $reward_priority;

        return $this;
    }

    /**
     * Gets max_count
     *
     * @return int
     */
    public function getMaxCount()
    {
        return $this->container['max_count'];
    }

    /**
     * Sets max_count
     *
     * @param int $max_count Maximum number of the reward applications.
     *
     * @return $this
     */
    public function setMaxCount($max_count)
    {
        $this->container['max_count'] = $max_count;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Reward description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets reward_properties
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\RewardProperties
     */
    public function getRewardProperties()
    {
        return $this->container['reward_properties'];
    }

    /**
     * Sets reward_properties
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\RewardProperties $reward_properties reward_properties
     *
     * @return $this
     */
    public function setRewardProperties($reward_properties)
    {
        $this->container['reward_properties'] = $reward_properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
