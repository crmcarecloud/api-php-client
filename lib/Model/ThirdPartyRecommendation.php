<?php
/**
 * ThirdPartyRecommendation
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.55
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * ThirdPartyRecommendation Class Doc Comment
 *
 * @category Class
 * @description Information about a third party recommendation structure.
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ThirdPartyRecommendation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ThirdPartyRecommendation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'third_party_recommendation_id' => 'string',
        'customer_id' => 'string',
        'products' => '\CrmCareCloud\Webservice\RestApi\Client\Model\ProductIdentification[]',
        'recommended_product' => '\CrmCareCloud\Webservice\RestApi\Client\Model\ProductIdentification',
        'recommendation_system_id' => 'string',
        'recommendation_system_dataset_id' => 'string',
        'score' => 'float',
        'state' => 'int',
        'last_change' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'third_party_recommendation_id' => null,
        'customer_id' => null,
        'products' => null,
        'recommended_product' => null,
        'recommendation_system_id' => null,
        'recommendation_system_dataset_id' => null,
        'score' => 'float',
        'state' => null,
        'last_change' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'third_party_recommendation_id' => 'third_party_recommendation_id',
        'customer_id' => 'customer_id',
        'products' => 'products',
        'recommended_product' => 'recommended_product',
        'recommendation_system_id' => 'recommendation_system_id',
        'recommendation_system_dataset_id' => 'recommendation_system_dataset_id',
        'score' => 'score',
        'state' => 'state',
        'last_change' => 'last_change'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'third_party_recommendation_id' => 'setThirdPartyRecommendationId',
        'customer_id' => 'setCustomerId',
        'products' => 'setProducts',
        'recommended_product' => 'setRecommendedProduct',
        'recommendation_system_id' => 'setRecommendationSystemId',
        'recommendation_system_dataset_id' => 'setRecommendationSystemDatasetId',
        'score' => 'setScore',
        'state' => 'setState',
        'last_change' => 'setLastChange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'third_party_recommendation_id' => 'getThirdPartyRecommendationId',
        'customer_id' => 'getCustomerId',
        'products' => 'getProducts',
        'recommended_product' => 'getRecommendedProduct',
        'recommendation_system_id' => 'getRecommendationSystemId',
        'recommendation_system_dataset_id' => 'getRecommendationSystemDatasetId',
        'score' => 'getScore',
        'state' => 'getState',
        'last_change' => 'getLastChange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_0 = 0;
const STATE_1 = 1;
const STATE_2 = 2;

    /**
     * Gets allowable values of the enum
     *
     * @return array<int,int|string>
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_0,
self::STATE_1,
self::STATE_2,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['third_party_recommendation_id'] = isset($data['third_party_recommendation_id']) ? $data['third_party_recommendation_id'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['recommended_product'] = isset($data['recommended_product']) ? $data['recommended_product'] : null;
        $this->container['recommendation_system_id'] = isset($data['recommendation_system_id']) ? $data['recommendation_system_id'] : null;
        $this->container['recommendation_system_dataset_id'] = isset($data['recommendation_system_dataset_id']) ? $data['recommendation_system_dataset_id'] : null;
        $this->container['score'] = isset($data['score']) ? $data['score'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['last_change'] = isset($data['last_change']) ? $data['last_change'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recommendation_system_id'] === null) {
            $invalidProperties[] = "'recommendation_system_id' can't be null";
        }
        if ($this->container['recommendation_system_dataset_id'] === null) {
            $invalidProperties[] = "'recommendation_system_dataset_id' can't be null";
        }
        if ($this->container['score'] === null) {
            $invalidProperties[] = "'score' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets third_party_recommendation_id
     *
     * @return string
     */
    public function getThirdPartyRecommendationId()
    {
        return $this->container['third_party_recommendation_id'];
    }

    /**
     * Sets third_party_recommendation_id
     *
     * @param string $third_party_recommendation_id The unique ID of the third party recommendation.
     *
     * @return $this
     */
    public function setThirdPartyRecommendationId($third_party_recommendation_id)
    {
        $this->container['third_party_recommendation_id'] = $third_party_recommendation_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id The unique ID of the CareCloud customer. Required only if `products` parameter is not set.
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets products
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\ProductIdentification[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\ProductIdentification[] $products Products from the shopping cart to which the recommended product is linked. Structure is required only if the parameter `customer_id` is not set.
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets recommended_product
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\ProductIdentification
     */
    public function getRecommendedProduct()
    {
        return $this->container['recommended_product'];
    }

    /**
     * Sets recommended_product
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\ProductIdentification $recommended_product recommended_product
     *
     * @return $this
     */
    public function setRecommendedProduct($recommended_product)
    {
        $this->container['recommended_product'] = $recommended_product;

        return $this;
    }

    /**
     * Gets recommendation_system_id
     *
     * @return string
     */
    public function getRecommendationSystemId()
    {
        return $this->container['recommendation_system_id'];
    }

    /**
     * Sets recommendation_system_id
     *
     * @param string $recommendation_system_id The unique ID of the third party recommendation system from resource recommendation systems.
     *
     * @return $this
     */
    public function setRecommendationSystemId($recommendation_system_id)
    {
        $this->container['recommendation_system_id'] = $recommendation_system_id;

        return $this;
    }

    /**
     * Gets recommendation_system_dataset_id
     *
     * @return string
     */
    public function getRecommendationSystemDatasetId()
    {
        return $this->container['recommendation_system_dataset_id'];
    }

    /**
     * Sets recommendation_system_dataset_id
     *
     * @param string $recommendation_system_dataset_id The unique ID of the third party recommendation system dataset.
     *
     * @return $this
     */
    public function setRecommendationSystemDatasetId($recommendation_system_dataset_id)
    {
        $this->container['recommendation_system_dataset_id'] = $recommendation_system_dataset_id;

        return $this;
    }

    /**
     * Gets score
     *
     * @return float
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param float $score Score of the recommendation. Depends of score we will pick products to recommendation. Higher score means better results.
     *
     * @return $this
     */
    public function setScore($score)
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state State of the recommendation. *Possible values are: 0 - deleted / 1 - active / 2 - non active*
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($state) && !in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets last_change
     *
     * @return string
     */
    public function getLastChange()
    {
        return $this->container['last_change'];
    }

    /**
     * Sets last_change
     *
     * @param string $last_change Date and time of the last change. *(YYYY-MM-DD HH:MM:SS)*
     *
     * @return $this
     */
    public function setLastChange($last_change)
    {
        $this->container['last_change'] = $last_change;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
