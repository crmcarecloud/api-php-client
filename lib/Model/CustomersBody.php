<?php
/**
 * CustomersBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * REST API Reference
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@carecloud.cz
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.26
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CrmCareCloud\Webservice\RestApi\Client\Model;

use \ArrayAccess;
use \CrmCareCloud\Webservice\RestApi\Client\ObjectSerializer;

/**
 * CustomersBody Class Doc Comment
 *
 * @category Class
 * @package  CrmCareCloud\Webservice\RestApi\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomersBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'customers_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string,string>
      */
    protected static $swaggerTypes = [
        'customer' => '\CrmCareCloud\Webservice\RestApi\Client\Model\Customer',
'customer_source' => '\CrmCareCloud\Webservice\RestApi\Client\Model\CustomerSourceRecord',
'password' => 'string',
'autologin' => 'bool',
'social_network_credentials' => '\CrmCareCloud\Webservice\RestApi\Client\Model\SocialNetworkCredentials',
'property_records' => '\CrmCareCloud\Webservice\RestApi\Client\Model\PropertyRecord[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string,string|null>
      */
    protected static $swaggerFormats = [
        'customer' => null,
'customer_source' => null,
'password' => 'password',
'autologin' => null,
'social_network_credentials' => null,
'property_records' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string,string>
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string,string|null>
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer' => 'customer',
'customer_source' => 'customer_source',
'password' => 'password',
'autologin' => 'autologin',
'social_network_credentials' => 'social_network_credentials',
'property_records' => 'property_records'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer' => 'setCustomer',
'customer_source' => 'setCustomerSource',
'password' => 'setPassword',
'autologin' => 'setAutologin',
'social_network_credentials' => 'setSocialNetworkCredentials',
'property_records' => 'setPropertyRecords'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer' => 'getCustomer',
'customer_source' => 'getCustomerSource',
'password' => 'getPassword',
'autologin' => 'getAutologin',
'social_network_credentials' => 'getSocialNetworkCredentials',
'property_records' => 'getPropertyRecords'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['customer_source'] = isset($data['customer_source']) ? $data['customer_source'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['autologin'] = isset($data['autologin']) ? $data['autologin'] : null;
        $this->container['social_network_credentials'] = isset($data['social_network_credentials']) ? $data['social_network_credentials'] : null;
        $this->container['property_records'] = isset($data['property_records']) ? $data['property_records'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer'] === null) {
            $invalidProperties[] = "'customer' can't be null";
        }
        if ($this->container['customer_source'] === null) {
            $invalidProperties[] = "'customer_source' can't be null";
        }
        if ($this->container['autologin'] === null) {
            $invalidProperties[] = "'autologin' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\Customer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\Customer $customer customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_source
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\CustomerSourceRecord
     */
    public function getCustomerSource()
    {
        return $this->container['customer_source'];
    }

    /**
     * Sets customer_source
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\CustomerSourceRecord $customer_source customer_source
     *
     * @return $this
     */
    public function setCustomerSource($customer_source)
    {
        $this->container['customer_source'] = $customer_source;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Password of the customer. Password must satisfy the following criteria and contain: At least one number (Example: 1 2 3); At least one uppercase letter (Example: A B C); Minimum lenght of password is 8 characters; Password is not part of a common password list (Example: abc123, password, 12345). If parameter `autologin=true`, password is required, otherwise is optional.
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets autologin
     *
     * @return bool
     */
    public function getAutologin()
    {
        return $this->container['autologin'];
    }

    /**
     * Sets autologin
     *
     * @param bool $autologin If true, password is required and customer is logged in. Otherwise password is optional.
     *
     * @return $this
     */
    public function setAutologin($autologin)
    {
        $this->container['autologin'] = $autologin;

        return $this;
    }

    /**
     * Gets social_network_credentials
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\SocialNetworkCredentials
     */
    public function getSocialNetworkCredentials()
    {
        return $this->container['social_network_credentials'];
    }

    /**
     * Sets social_network_credentials
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\SocialNetworkCredentials $social_network_credentials social_network_credentials
     *
     * @return $this
     */
    public function setSocialNetworkCredentials($social_network_credentials)
    {
        $this->container['social_network_credentials'] = $social_network_credentials;

        return $this;
    }

    /**
     * Gets property_records
     *
     * @return \CrmCareCloud\Webservice\RestApi\Client\Model\PropertyRecord[]
     */
    public function getPropertyRecords()
    {
        return $this->container['property_records'];
    }

    /**
     * Sets property_records
     *
     * @param \CrmCareCloud\Webservice\RestApi\Client\Model\PropertyRecord[] $property_records List of an customer property records.
     *
     * @return $this
     */
    public function setPropertyRecords($property_records)
    {
        $this->container['property_records'] = $property_records;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
